<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.smart.home.modules.message.dao.MessageContentMapper">
  <resultMap id="BaseResultMap" type="com.smart.home.modules.message.entity.MessageContent">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="cover_image" jdbcType="VARCHAR" property="coverImage" />
    <result column="message_type" jdbcType="INTEGER" property="messageType" />
    <result column="source_id" jdbcType="BIGINT" property="sourceId" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="message_content" jdbcType="VARCHAR" property="messageContent" />
    <result column="sender_id" jdbcType="BIGINT" property="senderId" />
    <result column="receiver_id" jdbcType="BIGINT" property="receiverId" />
    <result column="read_flag" jdbcType="INTEGER" property="readFlag" />
    <result column="delete_flag" jdbcType="INTEGER" property="deleteFlag" />
    <result column="created_by" jdbcType="BIGINT" property="createdBy" />
    <result column="created_time" jdbcType="TIMESTAMP" property="createdTime" />
    <result column="nick_name" jdbcType="VARCHAR" property="nickName" />
    <result column="message_sub_type" jdbcType="INTEGER" property="messageSubType" />
    <result column="head_url" jdbcType="VARCHAR" property="headUrl" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, cover_image, message_type, source_id, title, message_content, sender_id, receiver_id, 
    read_flag, delete_flag, created_by, created_time,nick_name,message_sub_type,head_url
  </sql>
  <select id="selectByExample" parameterType="com.smart.home.modules.message.entity.MessageContentExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from message_content
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from message_content
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from message_content
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.smart.home.modules.message.entity.MessageContentExample">
    delete from message_content
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.smart.home.modules.message.entity.MessageContent">
    insert into message_content (id, cover_image, message_type, 
      source_id, title, message_content, 
      sender_id, receiver_id, read_flag, 
      delete_flag, created_by, created_time
      )
    values (#{id,jdbcType=BIGINT}, #{coverImage,jdbcType=VARCHAR}, #{messageType,jdbcType=INTEGER}, 
      #{sourceId,jdbcType=BIGINT}, #{title,jdbcType=VARCHAR}, #{messageContent,jdbcType=VARCHAR}, 
      #{senderId,jdbcType=BIGINT}, #{receiverId,jdbcType=BIGINT}, #{readFlag,jdbcType=INTEGER}, 
      #{deleteFlag,jdbcType=INTEGER}, #{createdBy,jdbcType=BIGINT}, #{createdTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.smart.home.modules.message.entity.MessageContent">
    insert into message_content
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="coverImage != null">
        cover_image,
      </if>
      <if test="messageType != null">
        message_type,
      </if>
      <if test="sourceId != null">
        source_id,
      </if>
      <if test="title != null">
        title,
      </if>
      <if test="messageContent != null">
        message_content,
      </if>
      <if test="senderId != null">
        sender_id,
      </if>
      <if test="receiverId != null">
        receiver_id,
      </if>
      <if test="readFlag != null">
        read_flag,
      </if>
      <if test="deleteFlag != null">
        delete_flag,
      </if>
      <if test="createdBy != null">
        created_by,
      </if>
      <if test="createdTime != null">
        created_time,
      </if>
      <if test="nickName != null">
        nick_name,
      </if>
      <if test="messageSubType != null">
        message_sub_type,
      </if>
      <if test="headUrl != null">
        head_url,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="coverImage != null">
        #{coverImage,jdbcType=VARCHAR},
      </if>
      <if test="messageType != null">
        #{messageType,jdbcType=INTEGER},
      </if>
      <if test="sourceId != null">
        #{sourceId,jdbcType=BIGINT},
      </if>
      <if test="title != null">
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="messageContent != null">
        #{messageContent,jdbcType=VARCHAR},
      </if>
      <if test="senderId != null">
        #{senderId,jdbcType=BIGINT},
      </if>
      <if test="receiverId != null">
        #{receiverId,jdbcType=BIGINT},
      </if>
      <if test="readFlag != null">
        #{readFlag,jdbcType=INTEGER},
      </if>
      <if test="deleteFlag != null">
        #{deleteFlag,jdbcType=INTEGER},
      </if>
      <if test="createdBy != null">
        #{createdBy,jdbcType=BIGINT},
      </if>
      <if test="createdTime != null">
        #{createdTime,jdbcType=TIMESTAMP},
      </if>
      <if test="nickName != null">
        #{nickName,jdbcType=VARCHAR},
      </if>
      <if test="messageSubType != null">
        #{messageSubType,jdbcType=INTEGER},
      </if>
      <if test="headUrl != null">
        #{headUrl,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.smart.home.modules.message.entity.MessageContentExample" resultType="java.lang.Long">
    select count(*) from message_content
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update message_content
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.coverImage != null">
        cover_image = #{record.coverImage,jdbcType=VARCHAR},
      </if>
      <if test="record.messageType != null">
        message_type = #{record.messageType,jdbcType=INTEGER},
      </if>
      <if test="record.sourceId != null">
        source_id = #{record.sourceId,jdbcType=BIGINT},
      </if>
      <if test="record.title != null">
        title = #{record.title,jdbcType=VARCHAR},
      </if>
      <if test="record.messageContent != null">
        message_content = #{record.messageContent,jdbcType=VARCHAR},
      </if>
      <if test="record.senderId != null">
        sender_id = #{record.senderId,jdbcType=BIGINT},
      </if>
      <if test="record.receiverId != null">
        receiver_id = #{record.receiverId,jdbcType=BIGINT},
      </if>
      <if test="record.readFlag != null">
        read_flag = #{record.readFlag,jdbcType=INTEGER},
      </if>
      <if test="record.deleteFlag != null">
        delete_flag = #{record.deleteFlag,jdbcType=INTEGER},
      </if>
      <if test="record.createdBy != null">
        created_by = #{record.createdBy,jdbcType=BIGINT},
      </if>
      <if test="record.createdTime != null">
        created_time = #{record.createdTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update message_content
    set id = #{record.id,jdbcType=BIGINT},
      cover_image = #{record.coverImage,jdbcType=VARCHAR},
      message_type = #{record.messageType,jdbcType=INTEGER},
      source_id = #{record.sourceId,jdbcType=BIGINT},
      title = #{record.title,jdbcType=VARCHAR},
      message_content = #{record.messageContent,jdbcType=VARCHAR},
      sender_id = #{record.senderId,jdbcType=BIGINT},
      receiver_id = #{record.receiverId,jdbcType=BIGINT},
      read_flag = #{record.readFlag,jdbcType=INTEGER},
      delete_flag = #{record.deleteFlag,jdbcType=INTEGER},
      created_by = #{record.createdBy,jdbcType=BIGINT},
      created_time = #{record.createdTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.smart.home.modules.message.entity.MessageContent">
    update message_content
    <set>
      <if test="coverImage != null">
        cover_image = #{coverImage,jdbcType=VARCHAR},
      </if>
      <if test="messageType != null">
        message_type = #{messageType,jdbcType=INTEGER},
      </if>
      <if test="sourceId != null">
        source_id = #{sourceId,jdbcType=BIGINT},
      </if>
      <if test="title != null">
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="messageContent != null">
        message_content = #{messageContent,jdbcType=VARCHAR},
      </if>
      <if test="senderId != null">
        sender_id = #{senderId,jdbcType=BIGINT},
      </if>
      <if test="receiverId != null">
        receiver_id = #{receiverId,jdbcType=BIGINT},
      </if>
      <if test="readFlag != null">
        read_flag = #{readFlag,jdbcType=INTEGER},
      </if>
      <if test="deleteFlag != null">
        delete_flag = #{deleteFlag,jdbcType=INTEGER},
      </if>
      <if test="createdBy != null">
        created_by = #{createdBy,jdbcType=BIGINT},
      </if>
      <if test="createdTime != null">
        created_time = #{createdTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.smart.home.modules.message.entity.MessageContent">
    update message_content
    set cover_image = #{coverImage,jdbcType=VARCHAR},
      message_type = #{messageType,jdbcType=INTEGER},
      source_id = #{sourceId,jdbcType=BIGINT},
      title = #{title,jdbcType=VARCHAR},
      message_content = #{messageContent,jdbcType=VARCHAR},
      sender_id = #{senderId,jdbcType=BIGINT},
      receiver_id = #{receiverId,jdbcType=BIGINT},
      read_flag = #{readFlag,jdbcType=INTEGER},
      delete_flag = #{deleteFlag,jdbcType=INTEGER},
      created_by = #{createdBy,jdbcType=BIGINT},
      created_time = #{createdTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <select id="queryUnReadNotifyMessage" resultType="com.smart.home.modules.message.entity.MessageContent">
    select message_content.id,
           message_content.cover_image as coverImage,
           message_content.title,
           message_content.message_content as messageContent,
           message_content.created_time as createdTime
    from message_content
                 left join message_read_history
            on message_content.id = message_read_history.message_id
                    and message_content.receiver_id = message_read_history.user_id
    where message_content.receiver_id = #{receiverId,jdbcType=BIGINT} and message_content.message_type = 2 and message_read_history.id is null
  </select>

  <update id="updateToRead">
    update message_content set read_flag = #{readFlag}
    where id in
      <foreach collection="messageIdList" item="messageId" open="(" separator="," close=")">
        #{messageId}
      </foreach>
    and receiver_id = #{toUserId}
  </update>

  <select id="queryChatMessage" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from message_content
    where (receiver_id = #{loginUserId,jdbcType=BIGINT} and sender_id = #{fromUserId})
    or (receiver_id = #{fromUserId,jdbcType=BIGINT} and sender_id = #{loginUserId})
    order by created_time desc
  </select>
</mapper>