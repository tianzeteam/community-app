<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.smart.home.modules.user.dao.UserCommunityAuthMapper">
  <resultMap id="BaseResultMap" type="com.smart.home.modules.user.entity.UserCommunityAuth">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="speak_flag" jdbcType="INTEGER" property="speakFlag" />
    <result column="black_flag" jdbcType="INTEGER" property="blackFlag" />
    <result column="effective_start_date" jdbcType="TIMESTAMP" property="effectiveStartDate" />
    <result column="effective_end_date" jdbcType="TIMESTAMP" property="effectiveEndDate" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
    <result column="created_time" jdbcType="TIMESTAMP" property="createdTime" />
    <result column="created_by" jdbcType="BIGINT" property="createdBy" />
    <result column="admin_flag" jdbcType="INTEGER" property="adminFlag" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, user_id, speak_flag, black_flag,effective_start_date,effective_end_date,
    remark,created_time,created_by,admin_flag
  </sql>
  <select id="selectByExample" parameterType="com.smart.home.modules.user.entity.UserCommunityAuthExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user_community_auth
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from user_community_auth
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from user_community_auth
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.smart.home.modules.user.entity.UserCommunityAuthExample">
    delete from user_community_auth
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.smart.home.modules.user.entity.UserCommunityAuth">
    insert into user_community_auth (id, user_id, speak_flag, 
      black_flag)
    values (#{id,jdbcType=BIGINT}, #{userId,jdbcType=BIGINT}, #{speakFlag,jdbcType=INTEGER}, 
      #{blackFlag,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.smart.home.modules.user.entity.UserCommunityAuth">
    insert into user_community_auth
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="speakFlag != null">
        speak_flag,
      </if>
      <if test="blackFlag != null">
        black_flag,
      </if>
      <if test="effectiveStartDate != null">
        effective_start_date,
      </if>
      <if test="effectiveEndDate != null">
        effective_end_date,
      </if>
      <if test="remark != null">
        remark,
      </if>
      <if test="createdTime != null">
        created_time,
      </if>
      <if test="createdBy != null">
        created_by,
      </if>
      <if test="adminFlag != null">
        admin_flag,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="speakFlag != null">
        #{speakFlag,jdbcType=INTEGER},
      </if>
      <if test="blackFlag != null">
        #{blackFlag,jdbcType=INTEGER},
      </if>
      <if test="effectiveStartDate != null">
        #{effectiveStartDate,jdbcType=TIMESTAMP},
      </if>
      <if test="effectiveEndDate != null">
        #{effectiveEndDate,jdbcType=TIMESTAMP},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="createdTime != null">
        #{createdTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createdBy != null">
        #{createdBy,jdbcType=BIGINT},
      </if>
      <if test="adminFlag != null">
        #{adminFlag,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.smart.home.modules.user.entity.UserCommunityAuthExample" resultType="java.lang.Long">
    select count(*) from user_community_auth
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update user_community_auth
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=BIGINT},
      </if>
      <if test="record.speakFlag != null">
        speak_flag = #{record.speakFlag,jdbcType=INTEGER},
      </if>
      <if test="record.blackFlag != null">
        black_flag = #{record.blackFlag,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update user_community_auth
    set id = #{record.id,jdbcType=BIGINT},
      user_id = #{record.userId,jdbcType=BIGINT},
      speak_flag = #{record.speakFlag,jdbcType=INTEGER},
      black_flag = #{record.blackFlag,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.smart.home.modules.user.entity.UserCommunityAuth">
    update user_community_auth
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="speakFlag != null">
        speak_flag = #{speakFlag,jdbcType=INTEGER},
      </if>
      <if test="blackFlag != null">
        black_flag = #{blackFlag,jdbcType=INTEGER},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="effectiveStartDate != null">
        effective_start_date = #{effectiveStartDate,jdbcType=TIMESTAMP},
      </if>
      <if test="effectiveEndDate != null">
        effective_end_date = #{effectiveEndDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.smart.home.modules.user.entity.UserCommunityAuth">
    update user_community_auth
    set user_id = #{userId,jdbcType=BIGINT},
      speak_flag = #{speakFlag,jdbcType=INTEGER},
      black_flag = #{blackFlag,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <update id="updateAdminFlag">
    update user_community_auth set admin_flag = #{flag} where user_id = #{userId,jdbcType=BIGINT}
    </update>

  <select id="queryAllAdminUser" resultType="com.smart.home.modules.user.entity.UserCommunityAuth">
    select uca.user_id as userId,
           ua.nick_name as nickName
    from user_community_auth uca
    left join user_account ua on ua.id = uca.user_id
    and uca.admin_flag = 1
    <if test="userId != null">
      and uca.user_id = #{userId,jdbcType=BIGINT}
    </if>
    <if test="nickName != null and nickName != ''">
      and ua.nick_name like concat('%',#{nickName},'%')
    </if>
  </select>
</mapper>