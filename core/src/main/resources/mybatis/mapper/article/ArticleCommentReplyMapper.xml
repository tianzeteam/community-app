<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.smart.home.modules.article.dao.ArticleCommentReplyMapper">
  <resultMap id="BaseResultMap" type="com.smart.home.modules.article.entity.ArticleCommentReply">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="pid" jdbcType="BIGINT" property="pid" />
    <result column="article_id" jdbcType="BIGINT" property="articleId" />
    <result column="article_comment_id" jdbcType="BIGINT" property="articleCommentId" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="contents" jdbcType="VARCHAR" property="contents" />
    <result column="created_time" jdbcType="TIMESTAMP" property="createdTime" />
    <result column="to_user_id" jdbcType="BIGINT" property="toUserId" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, pid, article_id, article_comment_id, user_id, contents, created_time,to_user_id
  </sql>
  <select id="selectByExample" parameterType="com.smart.home.modules.article.entity.ArticleCommentReplyExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from article_comment_reply
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from article_comment_reply
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from article_comment_reply
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.smart.home.modules.article.entity.ArticleCommentReplyExample">
    delete from article_comment_reply
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insertSelective" parameterType="com.smart.home.modules.article.entity.ArticleCommentReply">
    insert into article_comment_reply
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="pid != null">
        pid,
      </if>
      <if test="articleId != null">
        article_id,
      </if>
      <if test="articleCommentId != null">
        article_comment_id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="contents != null">
        contents,
      </if>
      <if test="createdTime != null">
        created_time,
      </if>
      <if test="toUserId != null">
        to_user_id,
      </if>
      <if test="toUserName != null">
        to_user_name,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="pid != null">
        #{pid,jdbcType=BIGINT},
      </if>
      <if test="articleId != null">
        #{articleId,jdbcType=BIGINT},
      </if>
      <if test="articleCommentId != null">
        #{articleCommentId,jdbcType=BIGINT},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="contents != null">
        #{contents,jdbcType=VARCHAR},
      </if>
      <if test="createdTime != null">
        #{createdTime,jdbcType=TIMESTAMP},
      </if>
      <if test="toUserId != null">
        #{toUserId,jdbcType=BIGINT},
      </if>
      <if test="toUserName != null">
        #{toUserName,jdbcType=VARCHAR}
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.smart.home.modules.article.entity.ArticleCommentReplyExample" resultType="java.lang.Long">
    select count(*) from article_comment_reply
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update article_comment_reply
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.pid != null">
        pid = #{record.pid,jdbcType=BIGINT},
      </if>
      <if test="record.articleId != null">
        article_id = #{record.articleId,jdbcType=BIGINT},
      </if>
      <if test="record.articleCommentId != null">
        article_comment_id = #{record.articleCommentId,jdbcType=BIGINT},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=BIGINT},
      </if>
      <if test="record.contents != null">
        contents = #{record.contents,jdbcType=VARCHAR},
      </if>
      <if test="record.createdTime != null">
        created_time = #{record.createdTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update article_comment_reply
    set id = #{record.id,jdbcType=BIGINT},
      pid = #{record.pid,jdbcType=BIGINT},
      article_id = #{record.articleId,jdbcType=BIGINT},
      article_comment_id = #{record.articleCommentId,jdbcType=BIGINT},
      user_id = #{record.userId,jdbcType=BIGINT},
      contents = #{record.contents,jdbcType=VARCHAR},
      created_time = #{record.createdTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.smart.home.modules.article.entity.ArticleCommentReply">
    update article_comment_reply
    <set>
      <if test="pid != null">
        pid = #{pid,jdbcType=BIGINT},
      </if>
      <if test="articleId != null">
        article_id = #{articleId,jdbcType=BIGINT},
      </if>
      <if test="articleCommentId != null">
        article_comment_id = #{articleCommentId,jdbcType=BIGINT},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="contents != null">
        contents = #{contents,jdbcType=VARCHAR},
      </if>
      <if test="createdTime != null">
        created_time = #{createdTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.smart.home.modules.article.entity.ArticleCommentReply">
    update article_comment_reply
    set pid = #{pid,jdbcType=BIGINT},
      article_id = #{articleId,jdbcType=BIGINT},
      article_comment_id = #{articleCommentId,jdbcType=BIGINT},
      user_id = #{userId,jdbcType=BIGINT},
      contents = #{contents,jdbcType=VARCHAR},
      created_time = #{createdTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <select id="queryCommentReplyByPageNoLogin" resultType="com.smart.home.modules.article.entity.ArticleCommentReply">
    select acr.id,
           acr.article_id as articleId,
           acr.article_comment_id as articleCommentId,
           acr.contents,
           acr.to_user_id as toUserId,
           acr.to_user_name as toUserName,
           acr.created_time as createdTime,
           ua.head_url as headUrl,
           ua.nick_name as nickName,
           ud.user_level as userLevel
    from article_comment_reply acr
                 left join user_account ua on ua.id = acr.user_id
                 left join user_data ud on ud.user_id = ua.id
    where acr.article_comment_id = #{articleCommentId,jdbcType=BIGINT}
  </select>

</mapper>