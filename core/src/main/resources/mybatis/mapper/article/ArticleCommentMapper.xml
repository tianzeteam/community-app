<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.smart.home.modules.article.dao.ArticleCommentMapper">
  <resultMap id="BaseResultMap" type="com.smart.home.modules.article.entity.ArticleComment">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="article_id" jdbcType="BIGINT" property="articleId" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="contents" jdbcType="VARCHAR" property="contents" />
    <result column="author_flag" jdbcType="INTEGER" property="authorFlag" />
    <result column="like_count" jdbcType="INTEGER" property="likeCount" />
    <result column="stamp_count" jdbcType="INTEGER" property="stampCount" />
    <result column="created_time" jdbcType="TIMESTAMP" property="createdTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, article_id, user_id, contents, author_flag, like_count, stamp_count, created_time
  </sql>
  <select id="selectByExample" parameterType="com.smart.home.modules.article.entity.ArticleCommentExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from article_comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from article_comment
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from article_comment
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.smart.home.modules.article.entity.ArticleCommentExample">
    delete from article_comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.smart.home.modules.article.entity.ArticleComment">
    insert into article_comment (id, article_id, user_id, 
      contents, author_flag, like_count, 
      stamp_count, created_time)
    values (#{id,jdbcType=BIGINT}, #{articleId,jdbcType=BIGINT}, #{userId,jdbcType=BIGINT}, 
      #{contents,jdbcType=VARCHAR}, #{authorFlag,jdbcType=INTEGER}, #{likeCount,jdbcType=INTEGER}, 
      #{stampCount,jdbcType=INTEGER}, #{createdTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.smart.home.modules.article.entity.ArticleComment"
          useGeneratedKeys="true" keyProperty="id" keyColumn="id">
    insert into article_comment
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="articleId != null">
        article_id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="contents != null">
        contents,
      </if>
      <if test="authorFlag != null">
        author_flag,
      </if>
      <if test="likeCount != null">
        like_count,
      </if>
      <if test="stampCount != null">
        stamp_count,
      </if>
      <if test="createdTime != null">
        created_time,
      </if>
      <if test="articleCategory != null">
        article_category,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="articleId != null">
        #{articleId,jdbcType=BIGINT},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="contents != null">
        #{contents,jdbcType=VARCHAR},
      </if>
      <if test="authorFlag != null">
        #{authorFlag,jdbcType=INTEGER},
      </if>
      <if test="likeCount != null">
        #{likeCount,jdbcType=INTEGER},
      </if>
      <if test="stampCount != null">
        #{stampCount,jdbcType=INTEGER},
      </if>
      <if test="createdTime != null">
        #{createdTime,jdbcType=TIMESTAMP},
      </if>
      <if test="articleCategory != null">
        #{articleCategory,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.smart.home.modules.article.entity.ArticleCommentExample" resultType="java.lang.Long">
    select count(*) from article_comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update article_comment
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.articleId != null">
        article_id = #{record.articleId,jdbcType=BIGINT},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=BIGINT},
      </if>
      <if test="record.contents != null">
        contents = #{record.contents,jdbcType=VARCHAR},
      </if>
      <if test="record.authorFlag != null">
        author_flag = #{record.authorFlag,jdbcType=INTEGER},
      </if>
      <if test="record.likeCount != null">
        like_count = #{record.likeCount,jdbcType=INTEGER},
      </if>
      <if test="record.stampCount != null">
        stamp_count = #{record.stampCount,jdbcType=INTEGER},
      </if>
      <if test="record.createdTime != null">
        created_time = #{record.createdTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update article_comment
    set id = #{record.id,jdbcType=BIGINT},
      article_id = #{record.articleId,jdbcType=BIGINT},
      user_id = #{record.userId,jdbcType=BIGINT},
      contents = #{record.contents,jdbcType=VARCHAR},
      author_flag = #{record.authorFlag,jdbcType=INTEGER},
      like_count = #{record.likeCount,jdbcType=INTEGER},
      stamp_count = #{record.stampCount,jdbcType=INTEGER},
      created_time = #{record.createdTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.smart.home.modules.article.entity.ArticleComment">
    update article_comment
    <set>
      <if test="articleId != null">
        article_id = #{articleId,jdbcType=BIGINT},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="contents != null">
        contents = #{contents,jdbcType=VARCHAR},
      </if>
      <if test="authorFlag != null">
        author_flag = #{authorFlag,jdbcType=INTEGER},
      </if>
      <if test="likeCount != null">
        like_count = #{likeCount,jdbcType=INTEGER},
      </if>
      <if test="stampCount != null">
        stamp_count = #{stampCount,jdbcType=INTEGER},
      </if>
      <if test="createdTime != null">
        created_time = #{createdTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.smart.home.modules.article.entity.ArticleComment">
    update article_comment
    set article_id = #{articleId,jdbcType=BIGINT},
      user_id = #{userId,jdbcType=BIGINT},
      contents = #{contents,jdbcType=VARCHAR},
      author_flag = #{authorFlag,jdbcType=INTEGER},
      like_count = #{likeCount,jdbcType=INTEGER},
      stamp_count = #{stampCount,jdbcType=INTEGER},
      created_time = #{createdTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <update id="increaseLikeCount">
    update article_comment set like_count = like_count + 1 where id = #{id,jdbcType=BIGINT}
  </update>

  <update id="decreaseLikeCount">
    update article_comment set like_count = like_count - 1 where id = #{id,jdbcType=BIGINT}
  </update>

  <update id="increaseStampCount">
    update article_comment set stamp_count = stamp_count + 1 where id = #{id,jdbcType=BIGINT}
  </update>

  <update id="decreaseStampCount">
    update article_comment set stamp_count = stamp_count - 1 where id = #{id,jdbcType=BIGINT}
  </update>

  <update id="increaseReplyCount">
    update article_comment set reply_count = reply_count + 1 where id = #{id,jdbcType=BIGINT}
  </update>

  <select id="queryCommentByPageNoLogin" resultType="com.smart.home.modules.article.entity.ArticleComment">
    select ac.id,
           ac.article_id as articleId,
           ac.contents,
           ac.created_time as createdTime,
           ac.like_count as likeCount,
           ac.stamp_count as stampCount,
           ac.author_flag as authorFlag,
           0 as likeFlag,
           0 as stampFlag,
           ua.head_url as headUrl,
           ua.nick_name as nickName,
           ud.user_level as userLevel
    from article_comment ac
                 left join user_account ua on ua.id = ac.user_id
                 left join user_data ud on ud.user_id = ua.id
    where ac.article_id = #{articleId,jdbcType=BIGINT}
    </select>

  <select id="queryCommentByPageWhenLogin"  resultType="com.smart.home.modules.article.entity.ArticleComment">
    select ac.id,
           ac.article_id as articleId,
           ac.contents,
           ac.created_time as createdTime,
           ac.like_count as likeCount,
           ac.stamp_count as stampCount,
           ac.author_flag as authorFlag,
           ac.user_id as userId,
           case when alh.id is null then 0 else 1 end as likeFlag,
           case when ash.id is null then 0 else 1 end as stampFlag,
           ua.head_url as headUrl,
           ua.nick_name as nickName,
           ud.user_level as userLevel
    from article_comment ac
                 left join user_account ua on ua.id = ac.user_id
                 left join user_data ud on ud.user_id = ua.id
                 left join article_like_history alh on alh.source_id = ac.id and alh.category = 0 and alh.user_id = #{userId,jdbcType=BIGINT}
                 left join article_stamp_history ash on ash.source_id = ac.id and ash.type = 0 and ash.user_id = #{userId,jdbcType=BIGINT}
    where ac.article_id = #{articleId,jdbcType=BIGINT}
  </select>

  <select id="queryViaUserIdByPageNoLogin" resultType="com.smart.home.modules.article.entity.ArticleComment">
    select ac.id,
           0 as pid,
           ua.head_url as headUrl,
           ua.nick_name as nickName,
           ud.user_level as userLevel,
           ac.author_flag as authorFlag,
           ac.contents,
           ac.created_time as createdTime,
           ac.like_count as likeCount,
           ac.stamp_count as stampCount,
           0 as likeFlag,
           0 as stampFlag
    from article_comment ac
                 left join user_account ua on ua.id = ac.user_id
                 left join user_data ud on ud.user_id = ua.id
    where ac.user_id = #{userId,jdbcType=BIGINT}
    order by ac.created_time desc
  </select>

  <select id="queryViaUserIdByPageWhenLogin" resultType="com.smart.home.modules.article.entity.ArticleComment">
    select ac.id,
           0 as pid,
           ua.head_url as headUrl,
           ua.nick_name as nickName,
           ud.user_level as userLevel,
           ac.author_flag as authorFlag,
           ac.contents,
           ac.created_time as createdTime,
           ac.like_count as likeCount,
           ac.stamp_count as stampCount,
           case when alh.id is null then 0 else 1 end as likeFlag,
           case when ash.id is null then 0 else 1 end as stampFlag
    from article_comment ac
                 left join user_account ua on ua.id = ac.user_id
                 left join user_data ud on ud.user_id = ua.id
                 left join article_like_history alh on alh.source_id = ac.id and alh.category = 0 and alh.user_id = #{loginUserId,jdbcType=BIGINT}
                 left join article_stamp_history ash on ash.source_id = ac.id and ash.type = 0 and ash.user_id = #{loginUserId,jdbcType=BIGINT}
    where ac.user_id = #{userId,jdbcType=BIGINT}
    order by ac.created_time desc
  </select>

  <update id="updateAutoAuditFlag">
    update article_comment
    set auto_audit_flag = #{autoAuditFlag},
        text_exception_reason = #{textExceptionReason}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <update id="updateAutoAuditFlagAndAuditFlag">
    update article_comment set auto_audit_flag = #{autoAuditFlag},audit_flag=#{auditFlag} where id = #{id,jdbcType=BIGINT}
  </update>

  <update id="updateHitSensitiveCount">
    update article_comment set hit_sensitive_count = #{count} where id = #{id}
  </update>

  <update id="updateAuditFlag">
    update article_comment set audit_flag = #{flag} where id = #{id} and audit_flag = 0
  </update>

  <select id="findUserIdById" resultType="java.lang.Long">
    select user_id from article_comment where id = #{id}
  </select>

  <select id="findUserAccountIdById" resultType="com.smart.home.modules.user.entity.UserAccount">
    select ua.id,
           ua.nick_name as nickName
    from article_comment a
                 left join user_account ua on ua.id = a.user_id
    where a.id = #{id,jdbcType=BIGINT}
  </select>

</mapper>