<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.smart.home.modules.article.dao.ArticleProductMappingMapper">
  <resultMap id="BaseResultMap" type="com.smart.home.modules.article.entity.ArticleProductMapping">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="article_id" jdbcType="BIGINT" property="articleId" />
    <result column="product_id" jdbcType="INTEGER" property="productId" />
    <result column="test_result" jdbcType="VARCHAR" property="testResult" />
    <result column="recommend_flag" jdbcType="INTEGER" property="recommendFlag" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, article_id, product_id, test_result, recommend_flag
  </sql>
  <select id="selectByExample" parameterType="com.smart.home.modules.article.entity.ArticleProductMappingExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from article_product_mapping
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from article_product_mapping
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from article_product_mapping
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.smart.home.modules.article.entity.ArticleProductMappingExample">
    delete from article_product_mapping
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.smart.home.modules.article.entity.ArticleProductMapping">
    insert into article_product_mapping (id, article_id, product_id, 
      test_result, recommend_flag)
    values (#{id,jdbcType=BIGINT}, #{articleId,jdbcType=BIGINT}, #{productId,jdbcType=INTEGER}, 
      #{testResult,jdbcType=VARCHAR}, #{recommendFlag,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.smart.home.modules.article.entity.ArticleProductMapping">
    insert into article_product_mapping
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="articleId != null">
        article_id,
      </if>
      <if test="productId != null">
        product_id,
      </if>
      <if test="testResult != null">
        test_result,
      </if>
      <if test="recommendFlag != null">
        recommend_flag,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="articleId != null">
        #{articleId,jdbcType=BIGINT},
      </if>
      <if test="productId != null">
        #{productId,jdbcType=INTEGER},
      </if>
      <if test="testResult != null">
        #{testResult,jdbcType=VARCHAR},
      </if>
      <if test="recommendFlag != null">
        #{recommendFlag,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.smart.home.modules.article.entity.ArticleProductMappingExample" resultType="java.lang.Long">
    select count(*) from article_product_mapping
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update article_product_mapping
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.articleId != null">
        article_id = #{record.articleId,jdbcType=BIGINT},
      </if>
      <if test="record.productId != null">
        product_id = #{record.productId,jdbcType=INTEGER},
      </if>
      <if test="record.testResult != null">
        test_result = #{record.testResult,jdbcType=VARCHAR},
      </if>
      <if test="record.recommendFlag != null">
        recommend_flag = #{record.recommendFlag,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update article_product_mapping
    set id = #{record.id,jdbcType=BIGINT},
      article_id = #{record.articleId,jdbcType=BIGINT},
      product_id = #{record.productId,jdbcType=INTEGER},
      test_result = #{record.testResult,jdbcType=VARCHAR},
      recommend_flag = #{record.recommendFlag,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.smart.home.modules.article.entity.ArticleProductMapping">
    update article_product_mapping
    <set>
      <if test="articleId != null">
        article_id = #{articleId,jdbcType=BIGINT},
      </if>
      <if test="productId != null">
        product_id = #{productId,jdbcType=INTEGER},
      </if>
      <if test="testResult != null">
        test_result = #{testResult,jdbcType=VARCHAR},
      </if>
      <if test="recommendFlag != null">
        recommend_flag = #{recommendFlag,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.smart.home.modules.article.entity.ArticleProductMapping">
    update article_product_mapping
    set article_id = #{articleId,jdbcType=BIGINT},
      product_id = #{productId,jdbcType=INTEGER},
      test_result = #{testResult,jdbcType=VARCHAR},
      recommend_flag = #{recommendFlag,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <select id="findByArticleId" resultType="com.smart.home.modules.article.entity.ArticleProductMapping">
    select p.product_name as productName,
           p.cover_image as coverImage,
           apm.test_result as testResult,
           apm.product_id as productId,
           apm.recommend_flag as recommendFlag
    from article_product_mapping apm
                 left join product p on apm.product_id = p.id
    where apm.article_id = #{articleId,jdbcType=BIGINT}
    </select>
</mapper>