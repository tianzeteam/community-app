<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.smart.home.modules.product.dao.ProductCommentMapper">
  <resultMap id="BaseResultMap" type="com.smart.home.modules.product.entity.ProductComment">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="product_id" jdbcType="INTEGER" property="productId" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="star_count" jdbcType="DECIMAL" property="starCount" />
    <result column="details" jdbcType="VARCHAR" property="details" />
    <result column="fun_count" jdbcType="INTEGER" property="funCount" />
    <result column="like_count" jdbcType="INTEGER" property="likeCount" />
    <result column="stamp_count" jdbcType="INTEGER" property="stampCount" />
    <result column="reply_count" jdbcType="INTEGER" property="replyCount" />
    <result column="created_time" jdbcType="DATE" property="createdTime" />
    <result column="images" jdbcType="VARCHAR" property="images"/>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, product_id, user_id, star_count, details, fun_count, like_count, stamp_count, 
    reply_count, created_time, images
  </sql>
  <select id="selectByExample" parameterType="com.smart.home.modules.product.entity.ProductCommentExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from product_comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from product_comment
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from product_comment
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.smart.home.modules.product.entity.ProductCommentExample">
    delete from product_comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.smart.home.modules.product.entity.ProductComment">
    insert into product_comment (id, product_id, user_id, 
      star_count, details, fun_count, 
      like_count, stamp_count, reply_count, 
      created_time)
    values (#{id,jdbcType=BIGINT}, #{productId,jdbcType=INTEGER}, #{userId,jdbcType=BIGINT}, 
      #{starCount,jdbcType=INTEGER}, #{details,jdbcType=VARCHAR}, #{funCount,jdbcType=INTEGER}, 
      #{likeCount,jdbcType=INTEGER}, #{stampCount,jdbcType=INTEGER}, #{replyCount,jdbcType=INTEGER}, 
      #{createdTime,jdbcType=DATE})
  </insert>
  <insert id="insertSelective" parameterType="com.smart.home.modules.product.entity.ProductComment"
          useGeneratedKeys="true" keyProperty="id" keyColumn="id">
    insert into product_comment
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="productId != null">
        product_id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="starCount != null">
        star_count,
      </if>
      <if test="details != null">
        details,
      </if>
      <if test="funCount != null">
        fun_count,
      </if>
      <if test="likeCount != null">
        like_count,
      </if>
      <if test="stampCount != null">
        stamp_count,
      </if>
      <if test="replyCount != null">
        reply_count,
      </if>
      <if test="createdTime != null">
        created_time,
      </if>
        <if test="images != null">
            images,
        </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="productId != null">
        #{productId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="starCount != null">
        #{starCount,jdbcType=INTEGER},
      </if>
      <if test="details != null">
        #{details,jdbcType=VARCHAR},
      </if>
      <if test="funCount != null">
        #{funCount,jdbcType=INTEGER},
      </if>
      <if test="likeCount != null">
        #{likeCount,jdbcType=INTEGER},
      </if>
      <if test="stampCount != null">
        #{stampCount,jdbcType=INTEGER},
      </if>
      <if test="replyCount != null">
        #{replyCount,jdbcType=INTEGER},
      </if>
      <if test="createdTime != null">
        #{createdTime,jdbcType=DATE},
      </if>
        <if test="images != null">
            #{images,jdbcType=VARCHAR},
        </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.smart.home.modules.product.entity.ProductCommentExample" resultType="java.lang.Long">
    select count(*) from product_comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update product_comment
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.productId != null">
        product_id = #{record.productId,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=BIGINT},
      </if>
      <if test="record.starCount != null">
        star_count = #{record.starCount,jdbcType=INTEGER},
      </if>
      <if test="record.details != null">
        details = #{record.details,jdbcType=VARCHAR},
      </if>
      <if test="record.funCount != null">
        fun_count = #{record.funCount,jdbcType=INTEGER},
      </if>
      <if test="record.likeCount != null">
        like_count = #{record.likeCount,jdbcType=INTEGER},
      </if>
      <if test="record.stampCount != null">
        stamp_count = #{record.stampCount,jdbcType=INTEGER},
      </if>
      <if test="record.replyCount != null">
        reply_count = #{record.replyCount,jdbcType=INTEGER},
      </if>
      <if test="record.createdTime != null">
        created_time = #{record.createdTime,jdbcType=DATE},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update product_comment
    set id = #{record.id,jdbcType=BIGINT},
      product_id = #{record.productId,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=BIGINT},
      star_count = #{record.starCount,jdbcType=INTEGER},
      details = #{record.details,jdbcType=VARCHAR},
      fun_count = #{record.funCount,jdbcType=INTEGER},
      like_count = #{record.likeCount,jdbcType=INTEGER},
      stamp_count = #{record.stampCount,jdbcType=INTEGER},
      reply_count = #{record.replyCount,jdbcType=INTEGER},
      created_time = #{record.createdTime,jdbcType=DATE}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.smart.home.modules.product.entity.ProductComment">
    update product_comment
    <set>
      <if test="productId != null">
        product_id = #{productId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="starCount != null">
        star_count = #{starCount,jdbcType=INTEGER},
      </if>
      <if test="details != null">
        details = #{details,jdbcType=VARCHAR},
      </if>
      <if test="funCount != null">
        fun_count = #{funCount,jdbcType=INTEGER},
      </if>
      <if test="likeCount != null">
        like_count = #{likeCount,jdbcType=INTEGER},
      </if>
      <if test="stampCount != null">
        stamp_count = #{stampCount,jdbcType=INTEGER},
      </if>
      <if test="replyCount != null">
        reply_count = #{replyCount,jdbcType=INTEGER},
      </if>
      <if test="createdTime != null">
        created_time = #{createdTime,jdbcType=DATE},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.smart.home.modules.product.entity.ProductComment">
    update product_comment
    set product_id = #{productId,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=BIGINT},
      star_count = #{starCount,jdbcType=INTEGER},
      details = #{details,jdbcType=VARCHAR},
      fun_count = #{funCount,jdbcType=INTEGER},
      like_count = #{likeCount,jdbcType=INTEGER},
      stamp_count = #{stampCount,jdbcType=INTEGER},
      reply_count = #{replyCount,jdbcType=INTEGER},
      created_time = #{createdTime,jdbcType=DATE}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <update id="increaseLikeCount">
    update product_comment set like_count = like_count + 1 where id = #{id,jdbcType=BIGINT}
    </update>

  <update id="decreaseLikeCount">
    update product_comment set like_count = like_count - 1 where id = #{id,jdbcType=BIGINT}
  </update>

  <update id="increaseStampCount">
    update product_comment set stamp_count = stamp_count + 1 where id = #{id,jdbcType=BIGINT}
  </update>

  <update id="decreaseStampCount">
    update product_comment set stamp_count = stamp_count - 1 where id = #{id,jdbcType=BIGINT}
  </update>

  <update id="increaseFunCount">
    update product_comment set fun_count = fun_count + 1 where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="decreaseFunCount">
    update product_comment set fun_count = fun_count - 1 where id = #{id,jdbcType=BIGINT}
  </update>

    <update id="increaseReplyCount">
        update product_comment set reply_count = reply_count + 1 where id = #{id,jdbcType=BIGINT}
    </update>

  <select id="queryCommentByPage" resultType="com.smart.home.modules.product.entity.ProductComment">
    select ua.head_url as headUrl,
           ua.nick_name as nickName,
           ua.id as userId,
           ud.user_level as userLevel,
           pc.id,
           pc.images,
           pc.star_count as starCount,
           pc.details as details,
           pc.fun_count as funCount,
           pc.like_count as likeCount,
           pc.stamp_count as stampCount,
           pcfh.id as funId,
           pclh.id as likeId,
           pcsh.id as stampId
    from product_comment pc
                 left join user_account ua on pc.user_id = ua.id
                 left join user_data ud on ua.id = ud.user_id
                 left join product_comment_fun_history pcfh on pcfh.source_id = pc.id and pcfh.user_id = #{loginUserId} and pcfh.category = 0
                 left join product_comment_like_history pclh on pclh.source_id = pc.id and pclh.user_id = #{loginUserId} and pclh.category = 0
                 left join product_comment_stamp_history pcsh on pcsh.source_id = pc.id and pcsh.user_id = #{loginUserId} and pcsh.category = 0
    where pc.product_id = #{productId} and pc.audit_flag = 1
  </select>

  <select id="queryCommentDetailHead" resultType="com.smart.home.modules.product.entity.ProductComment">
    select ua.head_url as headUrl,
           ua.nick_name as nickName,
           ud.user_level as userLevel,
           pc.star_count as starCount,
           pc.details as details,
           pc.fun_count as funCount,
           pc.like_count as likeCount,
           pc.stamp_count as stampCount,
           pc.images,
           pc.product_id as productId,
           pc.created_time as createdTime,
           pc.id,
           pcfh.id as funId,
           pclh.id as likeId,
           pcsh.id as stampId
    from product_comment pc
                 left join user_account ua on pc.user_id = ua.id
                 left join user_data ud on ua.id = ud.user_id
                 left join product_comment_fun_history pcfh on pcfh.source_id = pc.id and pcfh.user_id = #{loginUserId} and pcfh.category = 0
                 left join product_comment_like_history pclh on pclh.source_id = pc.id and pclh.user_id = #{loginUserId} and pclh.category = 0
                 left join product_comment_stamp_history pcsh on pcsh.source_id = pc.id and pcsh.user_id = #{loginUserId} and pcsh.category = 0
    where pc.id = #{productCommentId}
  </select>

  <select id="queryViaProductIdByPage" resultType="com.smart.home.modules.product.entity.ProductComment">
        select ua.head_url as headUrl,
               ua.nick_name as nickName,
               ud.user_level as userLevel,
               pc.user_id as userId,
               pc.star_count as starCount,
               pc.created_time as createdTime,
               pc.details as details,
               pc.fun_count as funCount,
               pc.like_count as likeCount,
               pc.stamp_count as stampCount,
               pc.reply_count as replyCount,
               pc.images,
               pc.id
        from product_comment pc
                     left join user_account ua on ua.id = pc.user_id
                     left join user_data ud on ud.user_id = ua.id
                     left join product_comment_like_history alh on alh.source_id = pc.id and alh.category = 0 and alh.user_id = #{loginUserId,jdbcType=BIGINT}
                     left join product_comment_stamp_history ash on ash.source_id = pc.id and ash.category = 0 and ash.user_id = #{loginUserId,jdbcType=BIGINT}
                     left join product_comment_fun_history pcfh on pcfh.source_id = pc.id and pcfh.category = 0 and pcfh.user_id = #{loginUserId,jdbcType=BIGINT}
        where pc.product_id = #{productId,jdbcType=INTEGER}
        order by pc.created_time desc
    </select>

  <update id="updateAutoAuditFlag">
    update product_comment
    set auto_audit_flag = #{autoAuditFlag},text_exception_reason=#{textExceptionReason}
    where id = #{id,jdbcType=BIGINT}
  </update>

    <update id="updateAutoAuditFlag4ImageAudit">
        update product_comment
        set auto_audit_flag = #{autoAuditFlag},image_exception_reason=#{imageExceptionReason}
        where id = #{id,jdbcType=BIGINT}
    </update>

  <update id="updateAutoAuditFlagAndAuditFlag">
    update product_comment set auto_audit_flag = #{autoAuditFlag},audit_flag=#{auditFlag} where id = #{id,jdbcType=BIGINT}
  </update>

  <update id="updateHitSensitiveCount">
    update product_comment set hit_sensitive_count = #{count} where id = #{id}
  </update>

  <update id="updateAuditFlag">
    update product_comment set audit_flag = #{flag} where id = #{id} and audit_flag = 0;
  </update>

  <select id="findUserIdById" resultType="java.lang.Long">
    select user_id from product_comment where id = #{id}
  </select>

  <select id="selectAllNeedAuditContent" resultType="com.smart.home.dto.ContentAuditAdminRecordTO"
          parameterType="com.smart.home.dto.ContentAdminAuditSearchTO">
    select * from
            (
                  select
                  pc.id,
                  1 as contentType,
                  ua.id as userId,
                  ua.nick_name as nickName,
                  '' as title,
                  pc.details as contents,
                  '' as images,
                  pc.reply_count as replyCount,
                  pc.like_count as likeCount,
                  pc.audit_flag as auditFlag,
                  pc.hit_sensitive_count as hitSensitiveCount,
                  pc.report_count as reportCount,
                  pc.report_count_rate as reportCountRate,
                  pc.auto_audit_flag as autoAuditFlag,
                  pc.text_exception_reason as textExceptionReason,
                  pc.image_exception_reason as imageExceptionReason,
                  pc.created_time as createdTime
                  from product_comment pc
                  left join user_account ua on ua.id = pc.user_id

                  union all

                  select
                  pcr.id,
                  5 as contentType,
                  ua.id as userId,
                  ua.nick_name as nickName,
                  '' as title,
                  pcr.details as contents,
                  '' as images,
                  0 as replyCount,
                  pcr.like_count as likeCount,
                  pcr.audit_flag as auditFlag,
                  pcr.hit_sensitive_count as hitSensitiveCount,
                  0 as reportCount,
                  '' as reportCountRate,
                  pcr.auto_audit_flag as autoAuditFlag,
                  pcr.text_exception_reason as textExceptionReason,
                  pcr.image_exception_reason as imageExceptionReason,
                  pcr.created_time as createdTime
                  from product_comment_reply pcr
                  left join user_account ua on ua.id = pcr.user_id

                  union all

                  select ac.id,
                  0 as contentType,
                  ua.id as userId,
                  ua.nick_name as nickName,
                  '' as title,
                  ac.contents,
                  '' as images,
                  ac.reply_count as replyCount,
                  ac.like_count as likeCount,
                  ac.audit_flag as auditFlag,
                  ac.hit_sensitive_count as hitSensitiveCount,
                  ac.report_count as reportCount,
                  ac.report_count_rate as reportCountRate,
                  ac.auto_audit_flag as autoAuditFlag,
                  ac.text_exception_reason as textExceptionReason,
                  ac.image_exception_reason as imageExceptionReason,
                  ac.created_time as createdTime
                  from article_comment ac
                  left join user_account ua on ua.id = ac.user_id

                  union all

                  select acr.id,
                  4 as contentType,
                  ua.id as userId,
                  ua.nick_name as nickName,
                  '' as title,
                  acr.contents,
                  '' as images,
                  0 as replyCount,
                  0 as likeCount,
                  acr.audit_flag as auditFlag,
                  acr.hit_sensitive_count as hitSensitiveCount,
                  0 as reportCount,
                  '' as reportCountRate,
                  acr.auto_audit_flag as autoAuditFlag,
                  acr.text_exception_reason as textExceptionReason,
                  acr.image_exception_reason as imageExceptionReason,
                  acr.created_time as createdTime
                  from article_comment_reply acr acr
                  left join user_account ua on ua.id = acr.user_id

                  union all

                  select cp.id,
                  2 as contentType,
                  ua.id as userId,
                  ua.nick_name as nickName,
                  cp.title,
                  cp.contents,
                  cp.images,
                  cp.reply_count as replyCount,
                  cp.like_count as likeCount,
                  cp.audit_status as auditFlag,
                  cp.hit_sensitive_count as hitSensitiveCount,
                  cp.report_count as reportCount,
                  cp.report_count_rate as reportCountRate,
                  cp.auto_audit_flag as autoAuditFlag,
                  cp.text_exception_reason as textExceptionReason,
                  cp.image_exception_reason as imageExceptionReason,
                  cp.created_time as createdTime
                  from community_post cp
                  left join user_account ua on ua.id = cp.user_id

                  union all

                  select cpr.id,
                  3 as contentType,
                  ua.id as userId,
                  ua.nick_name as nickName,
                  '' as title,
                  cpr.contents,
                  '' as images,
                  cpr.reply_count as replyCount,
                  cpr.like_count as likeCount,
                  cpr.audit_flag as auditFlag,
                  cpr.hit_sensitive_count as hitSensitiveCount,
                  cpr.report_count as reportCount,
                  cpr.report_count_rate as reportCountRate,
                  cpr.auto_audit_flag as autoAuditFlag,
                  cpr.text_exception_reason as textExceptionReason,
                  cpr.image_exception_reason as imageExceptionReason,
                  cpr.created_time as createdTime
                  from community_post_reply cpr
                  left join user_account ua on ua.id = cpr.user_id
                    ) t
    where auditFlag = 0
      <if test="contentTypeList != null">
            and contentType in
            <foreach collection="contentTypeList" item="contentType" open="(" separator="," close=")">
                #{contentType}
            </foreach>
        </if>
      <if test="userId != null">
          and userId = #{userId}
      </if>
      <choose>
          <when test="contentException != null and contentException == 2">
              and ( 1=1
              <if test="hitSensitiveCount != null">
                 or hitSensitiveCount > #{hitSensitiveCount}
              </if>
              <if test="reportCount != null">
                 or reportCount > #{reportCount}
              </if>
              <if test="textExceptionFlag != null and textExceptionFlag == 1">
                  or autoAuditFlag in (3,4)
              </if>
              <if test="imageExceptionFlag != null and imageExceptionFlag == 1">
                  or autoAuditFlag in (2,4)
              </if>
              )
          </when>
          <when test="contentException != null and contentException == 1">
              and (hitSensitiveCount > 0
                  or reportCount > 0
                  or autoAuditFlag in (2,3,4)
              )
          </when>
      </choose>
      <if test="sortField != null">
          order by #{sortField} desc
      </if>
  </select>

  <select id="queryViaUserIdByPageWhenLogin" resultType="com.smart.home.modules.product.entity.ProductComment">
      select pc.id,
             ua.head_url as headUrl,
             ua.nick_name as nickName,
             ud.user_level as userLevel,
             pc.star_count as starCount,
             pc.created_time as createdTime,
             pc.details,
             pc.images,
             pc.fun_count as funCount,
             pc.like_count as likeCount,
             pc.stamp_count as stampCount,
             pc.reply_count as replyCount,
             case when alh.id is null then 0 else 1 end as likeFlag,
             case when ash.id is null then 0 else 1 end as stampFlag,
             case when pcfh.id is null then 0 else 1 end as funFlag
      from product_comment pc
                   left join user_account ua on ua.id = pc.user_id
                   left join user_data ud on ud.user_id = ua.id
                   left join product_comment_like_history alh on alh.source_id = pc.id and alh.category = 0 and alh.user_id = #{loginUserId,jdbcType=BIGINT}
                   left join product_comment_stamp_history ash on ash.source_id = pc.id and ash.category = 0 and ash.user_id = #{loginUserId,jdbcType=BIGINT}
                   left join product_comment_fun_history pcfh on pcfh.source_id = pc.id and pcfh.category = 0 and pcfh.user_id = #{loginUserId,jdbcType=BIGINT}
      where pc.user_id = #{userId,jdbcType=BIGINT} and pc.audit_flag = 1
      order by pc.created_time desc
    </select>

</mapper>