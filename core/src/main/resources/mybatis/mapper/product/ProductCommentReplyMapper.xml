<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.smart.home.modules.product.dao.ProductCommentReplyMapper">
  <resultMap id="BaseResultMap" type="com.smart.home.modules.product.entity.ProductCommentReply">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="comment_id" jdbcType="BIGINT" property="commentId" />
    <result column="pid" jdbcType="BIGINT" property="pid" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="details" jdbcType="VARCHAR" property="details" />
    <result column="like_count" jdbcType="INTEGER" property="likeCount" />
    <result column="stamp_count" jdbcType="INTEGER" property="stampCount" />
    <result column="fun_count" jdbcType="INTEGER" property="funCount" />
    <result column="revision" jdbcType="INTEGER" property="revision" />
    <result column="created_time" jdbcType="TIMESTAMP" property="createdTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, comment_id, pid, user_id, details, like_count, stamp_count,fun_count, revision, created_time
  </sql>
  <select id="selectByExample" parameterType="com.smart.home.modules.product.entity.ProductCommentReplyExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from product_comment_reply
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from product_comment_reply
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from product_comment_reply
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.smart.home.modules.product.entity.ProductCommentReplyExample">
    delete from product_comment_reply
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.smart.home.modules.product.entity.ProductCommentReply">
    insert into product_comment_reply (id, comment_id, pid, 
      user_id, details, like_count, 
      stamp_count, revision, created_time
      )
    values (#{id,jdbcType=BIGINT}, #{commentId,jdbcType=BIGINT}, #{pid,jdbcType=BIGINT}, 
      #{userId,jdbcType=BIGINT}, #{details,jdbcType=VARCHAR}, #{likeCount,jdbcType=INTEGER}, 
      #{stampCount,jdbcType=INTEGER}, #{revision,jdbcType=INTEGER}, #{createdTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.smart.home.modules.product.entity.ProductCommentReply">
    insert into product_comment_reply
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="commentId != null">
        comment_id,
      </if>
      <if test="pid != null">
        pid,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="details != null">
        details,
      </if>
      <if test="likeCount != null">
        like_count,
      </if>
      <if test="stampCount != null">
        stamp_count,
      </if>
      <if test="revision != null">
        revision,
      </if>
      <if test="createdTime != null">
        created_time,
      </if>
      <if test="funCount != null">
        fun_count,
      </if>
      <if test="toUserId != null">
        to_user_id,
      </if>
      <if test="toUserName != null">
        to_user_name,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="commentId != null">
        #{commentId,jdbcType=BIGINT},
      </if>
      <if test="pid != null">
        #{pid,jdbcType=BIGINT},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="details != null">
        #{details,jdbcType=VARCHAR},
      </if>
      <if test="likeCount != null">
        #{likeCount,jdbcType=INTEGER},
      </if>
      <if test="stampCount != null">
        #{stampCount,jdbcType=INTEGER},
      </if>
      <if test="revision != null">
        #{revision,jdbcType=INTEGER},
      </if>
      <if test="createdTime != null">
        #{createdTime,jdbcType=TIMESTAMP},
      </if>
      <if test="funCount != null">
        #{funCount,jdbcType=INTEGER},
      </if>
      <if test="toUserId != null">
        #{toUserId,jdbcType=BIGINT},
      </if>
      <if test="toUserName != null">
        #{toUserName,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.smart.home.modules.product.entity.ProductCommentReplyExample" resultType="java.lang.Long">
    select count(*) from product_comment_reply
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update product_comment_reply
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.commentId != null">
        comment_id = #{record.commentId,jdbcType=BIGINT},
      </if>
      <if test="record.pid != null">
        pid = #{record.pid,jdbcType=BIGINT},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=BIGINT},
      </if>
      <if test="record.details != null">
        details = #{record.details,jdbcType=VARCHAR},
      </if>
      <if test="record.likeCount != null">
        like_count = #{record.likeCount,jdbcType=INTEGER},
      </if>
      <if test="record.stampCount != null">
        stamp_count = #{record.stampCount,jdbcType=INTEGER},
      </if>
      <if test="record.revision != null">
        revision = #{record.revision,jdbcType=INTEGER},
      </if>
      <if test="record.createdTime != null">
        created_time = #{record.createdTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update product_comment_reply
    set id = #{record.id,jdbcType=BIGINT},
      comment_id = #{record.commentId,jdbcType=BIGINT},
      pid = #{record.pid,jdbcType=BIGINT},
      user_id = #{record.userId,jdbcType=BIGINT},
      details = #{record.details,jdbcType=VARCHAR},
      like_count = #{record.likeCount,jdbcType=INTEGER},
      stamp_count = #{record.stampCount,jdbcType=INTEGER},
      revision = #{record.revision,jdbcType=INTEGER},
      created_time = #{record.createdTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.smart.home.modules.product.entity.ProductCommentReply">
    update product_comment_reply
    <set>
      <if test="commentId != null">
        comment_id = #{commentId,jdbcType=BIGINT},
      </if>
      <if test="pid != null">
        pid = #{pid,jdbcType=BIGINT},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="details != null">
        details = #{details,jdbcType=VARCHAR},
      </if>
      <if test="likeCount != null">
        like_count = #{likeCount,jdbcType=INTEGER},
      </if>
      <if test="stampCount != null">
        stamp_count = #{stampCount,jdbcType=INTEGER},
      </if>
      <if test="revision != null">
        revision = #{revision,jdbcType=INTEGER},
      </if>
      <if test="createdTime != null">
        created_time = #{createdTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.smart.home.modules.product.entity.ProductCommentReply">
    update product_comment_reply
    set comment_id = #{commentId,jdbcType=BIGINT},
      pid = #{pid,jdbcType=BIGINT},
      user_id = #{userId,jdbcType=BIGINT},
      details = #{details,jdbcType=VARCHAR},
      like_count = #{likeCount,jdbcType=INTEGER},
      stamp_count = #{stampCount,jdbcType=INTEGER},
      revision = #{revision,jdbcType=INTEGER},
      created_time = #{createdTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <update id="increaseLikeCount">
    update product_comment_reply set like_count = like_count + 1 where id = #{id,jdbcType=BIGINT}
    </update>

  <update id="decreaseLikeCount">
    update product_comment_reply set like_count = like_count - 1 where id = #{id,jdbcType=BIGINT}
  </update>

  <update id="increaseStampCount">
    update product_comment_reply set stamp_count = stamp_count + 1 where id = #{id,jdbcType=BIGINT}
  </update>

  <update id="decreaseStampCount">
    update product_comment_reply set stamp_count = stamp_count - 1 where id = #{id,jdbcType=BIGINT}
  </update>

  <update id="increaseFunCount">
    update product_comment_reply set fun_count = fun_count + 1 where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="decreaseFunCount">
    update product_comment_reply set fun_count = fun_count - 1 where id = #{id,jdbcType=BIGINT}
  </update>

  <select id="queryCommentDetailReplyByPage" resultType="com.smart.home.modules.product.entity.ProductCommentReply">
    select pcr.id,
           ua.id as userId,
           ua.head_url as headUrl,
           ua.nick_name as nickName,
           pcr.details as details,
           pcr.fun_count as funCount,
           pcr.like_count as likeCount,
           pcr.stamp_count as stampCount,
           pcr.to_user_id as toUserId,
           pcr.to_user_name as toUserName,
           pclh.id as likeId,
           pcsh.id as stampId
    from product_comment_reply pcr
                 left join user_account ua on pcr.user_id = ua.id
                 left join product_comment_like_history pclh on pclh.source_id = pcr.id and pclh.user_id = #{loginUserId} and pclh.category = 1
                 left join product_comment_stamp_history pcsh on pcsh.source_id = pcr.id and pcsh.user_id = #{loginUserId} and pcsh.category = 1
    where pcr.comment_id = #{productCommentId} and pcr.pid = #{pid}
    order by pcr.id desc
  </select>

  <select id="findUserAccountByCommentId" resultType="com.smart.home.modules.user.entity.UserAccount">
    select ua.id,
           ua.nick_name as nickName
      from product_comment pc
    left join user_account ua on ua.id = pc.user_id
    where pc.id = #{productCommentId,jdbcType=BIGINT}
  </select>
</mapper>