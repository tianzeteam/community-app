<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.smart.home.modules.system.dao.SysFileMapper">
  <resultMap id="BaseResultMap" type="com.smart.home.modules.system.entity.SysFile">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="original_name" jdbcType="VARCHAR" property="originalName" />
    <result column="new_name" jdbcType="VARCHAR" property="newName" />
    <result column="url" jdbcType="VARCHAR" property="url" />
    <result column="location" jdbcType="VARCHAR" property="location" />
    <result column="mime" jdbcType="VARCHAR" property="mime" />
    <result column="size" jdbcType="BIGINT" property="size" />
    <result column="category" jdbcType="VARCHAR" property="category" />
    <result column="md5" jdbcType="VARCHAR" property="md5" />
    <result column="sha1" jdbcType="VARCHAR" property="sha1" />
    <result column="store_type" jdbcType="VARCHAR" property="storeType" />
    <result column="revision" jdbcType="INTEGER" property="revision" />
    <result column="created_by" jdbcType="BIGINT" property="createdBy" />
    <result column="created_time" jdbcType="DATE" property="createdTime" />
    <result column="updated_by" jdbcType="BIGINT" property="updatedBy" />
    <result column="updated_time" jdbcType="DATE" property="updatedTime" />
    <result column="sync_flag" jdbcType="INTEGER" property="syncFlag" />
    <result column="audit_state" jdbcType="INTEGER" property="auditState" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, original_name, new_name, url, location, mime, size, category, md5, sha1, store_type, 
    revision, created_by, created_time, updated_by, updated_time, sync_flag, audit_state
  </sql>
  <select id="selectByExample" parameterType="com.smart.home.modules.system.entity.SysFileExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from sys_file
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from sys_file
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from sys_file
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.smart.home.modules.system.entity.SysFileExample">
    delete from sys_file
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.smart.home.modules.system.entity.SysFile">
    insert into sys_file (id, original_name, new_name, 
      url, location, mime, 
      size, category, md5, 
      sha1, store_type, revision, 
      created_by, created_time, updated_by, 
      updated_time, sync_flag, audit_state
      )
    values (#{id,jdbcType=BIGINT}, #{originalName,jdbcType=VARCHAR}, #{newName,jdbcType=VARCHAR}, 
      #{url,jdbcType=VARCHAR}, #{location,jdbcType=VARCHAR}, #{mime,jdbcType=VARCHAR}, 
      #{size,jdbcType=BIGINT}, #{category,jdbcType=VARCHAR}, #{md5,jdbcType=VARCHAR}, 
      #{sha1,jdbcType=VARCHAR}, #{storeType,jdbcType=VARCHAR}, #{revision,jdbcType=INTEGER}, 
      #{createdBy,jdbcType=BIGINT}, #{createdTime,jdbcType=DATE}, #{updatedBy,jdbcType=BIGINT}, 
      #{updatedTime,jdbcType=DATE}, #{syncFlag,jdbcType=INTEGER}, #{auditState,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.smart.home.modules.system.entity.SysFile">
    insert into sys_file
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="originalName != null">
        original_name,
      </if>
      <if test="newName != null">
        new_name,
      </if>
      <if test="url != null">
        url,
      </if>
      <if test="location != null">
        location,
      </if>
      <if test="mime != null">
        mime,
      </if>
      <if test="size != null">
        size,
      </if>
      <if test="category != null">
        category,
      </if>
      <if test="md5 != null">
        md5,
      </if>
      <if test="sha1 != null">
        sha1,
      </if>
      <if test="storeType != null">
        store_type,
      </if>
      <if test="revision != null">
        revision,
      </if>
      <if test="createdBy != null">
        created_by,
      </if>
      <if test="createdTime != null">
        created_time,
      </if>
      <if test="updatedBy != null">
        updated_by,
      </if>
      <if test="updatedTime != null">
        updated_time,
      </if>
      <if test="syncFlag != null">
        sync_flag,
      </if>
      <if test="auditState != null">
        audit_state,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="originalName != null">
        #{originalName,jdbcType=VARCHAR},
      </if>
      <if test="newName != null">
        #{newName,jdbcType=VARCHAR},
      </if>
      <if test="url != null">
        #{url,jdbcType=VARCHAR},
      </if>
      <if test="location != null">
        #{location,jdbcType=VARCHAR},
      </if>
      <if test="mime != null">
        #{mime,jdbcType=VARCHAR},
      </if>
      <if test="size != null">
        #{size,jdbcType=BIGINT},
      </if>
      <if test="category != null">
        #{category,jdbcType=VARCHAR},
      </if>
      <if test="md5 != null">
        #{md5,jdbcType=VARCHAR},
      </if>
      <if test="sha1 != null">
        #{sha1,jdbcType=VARCHAR},
      </if>
      <if test="storeType != null">
        #{storeType,jdbcType=VARCHAR},
      </if>
      <if test="revision != null">
        #{revision,jdbcType=INTEGER},
      </if>
      <if test="createdBy != null">
        #{createdBy,jdbcType=BIGINT},
      </if>
      <if test="createdTime != null">
        #{createdTime,jdbcType=DATE},
      </if>
      <if test="updatedBy != null">
        #{updatedBy,jdbcType=BIGINT},
      </if>
      <if test="updatedTime != null">
        #{updatedTime,jdbcType=DATE},
      </if>
      <if test="syncFlag != null">
        #{syncFlag,jdbcType=INTEGER},
      </if>
      <if test="auditState != null">
        #{auditState,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.smart.home.modules.system.entity.SysFileExample" resultType="java.lang.Long">
    select count(*) from sys_file
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update sys_file
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.originalName != null">
        original_name = #{record.originalName,jdbcType=VARCHAR},
      </if>
      <if test="record.newName != null">
        new_name = #{record.newName,jdbcType=VARCHAR},
      </if>
      <if test="record.url != null">
        url = #{record.url,jdbcType=VARCHAR},
      </if>
      <if test="record.location != null">
        location = #{record.location,jdbcType=VARCHAR},
      </if>
      <if test="record.mime != null">
        mime = #{record.mime,jdbcType=VARCHAR},
      </if>
      <if test="record.size != null">
        size = #{record.size,jdbcType=BIGINT},
      </if>
      <if test="record.category != null">
        category = #{record.category,jdbcType=VARCHAR},
      </if>
      <if test="record.md5 != null">
        md5 = #{record.md5,jdbcType=VARCHAR},
      </if>
      <if test="record.sha1 != null">
        sha1 = #{record.sha1,jdbcType=VARCHAR},
      </if>
      <if test="record.storeType != null">
        store_type = #{record.storeType,jdbcType=VARCHAR},
      </if>
      <if test="record.revision != null">
        revision = #{record.revision,jdbcType=INTEGER},
      </if>
      <if test="record.createdBy != null">
        created_by = #{record.createdBy,jdbcType=BIGINT},
      </if>
      <if test="record.createdTime != null">
        created_time = #{record.createdTime,jdbcType=DATE},
      </if>
      <if test="record.updatedBy != null">
        updated_by = #{record.updatedBy,jdbcType=BIGINT},
      </if>
      <if test="record.updatedTime != null">
        updated_time = #{record.updatedTime,jdbcType=DATE},
      </if>
      <if test="record.syncFlag != null">
        sync_flag = #{record.syncFlag,jdbcType=INTEGER},
      </if>
      <if test="record.auditState != null">
        audit_state = #{record.auditState,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update sys_file
    set id = #{record.id,jdbcType=BIGINT},
      original_name = #{record.originalName,jdbcType=VARCHAR},
      new_name = #{record.newName,jdbcType=VARCHAR},
      url = #{record.url,jdbcType=VARCHAR},
      location = #{record.location,jdbcType=VARCHAR},
      mime = #{record.mime,jdbcType=VARCHAR},
      size = #{record.size,jdbcType=BIGINT},
      category = #{record.category,jdbcType=VARCHAR},
      md5 = #{record.md5,jdbcType=VARCHAR},
      sha1 = #{record.sha1,jdbcType=VARCHAR},
      store_type = #{record.storeType,jdbcType=VARCHAR},
      revision = #{record.revision,jdbcType=INTEGER},
      created_by = #{record.createdBy,jdbcType=BIGINT},
      created_time = #{record.createdTime,jdbcType=DATE},
      updated_by = #{record.updatedBy,jdbcType=BIGINT},
      updated_time = #{record.updatedTime,jdbcType=DATE},
      sync_flag = #{record.syncFlag,jdbcType=INTEGER},
      audit_state = #{record.auditState,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.smart.home.modules.system.entity.SysFile">
    update sys_file
    <set>
      <if test="originalName != null">
        original_name = #{originalName,jdbcType=VARCHAR},
      </if>
      <if test="newName != null">
        new_name = #{newName,jdbcType=VARCHAR},
      </if>
      <if test="url != null">
        url = #{url,jdbcType=VARCHAR},
      </if>
      <if test="location != null">
        location = #{location,jdbcType=VARCHAR},
      </if>
      <if test="mime != null">
        mime = #{mime,jdbcType=VARCHAR},
      </if>
      <if test="size != null">
        size = #{size,jdbcType=BIGINT},
      </if>
      <if test="category != null">
        category = #{category,jdbcType=VARCHAR},
      </if>
      <if test="md5 != null">
        md5 = #{md5,jdbcType=VARCHAR},
      </if>
      <if test="sha1 != null">
        sha1 = #{sha1,jdbcType=VARCHAR},
      </if>
      <if test="storeType != null">
        store_type = #{storeType,jdbcType=VARCHAR},
      </if>
      <if test="revision != null">
        revision = #{revision,jdbcType=INTEGER},
      </if>
      <if test="createdBy != null">
        created_by = #{createdBy,jdbcType=BIGINT},
      </if>
      <if test="createdTime != null">
        created_time = #{createdTime,jdbcType=DATE},
      </if>
      <if test="updatedBy != null">
        updated_by = #{updatedBy,jdbcType=BIGINT},
      </if>
      <if test="updatedTime != null">
        updated_time = #{updatedTime,jdbcType=DATE},
      </if>
      <if test="syncFlag != null">
        sync_flag = #{syncFlag,jdbcType=INTEGER},
      </if>
      <if test="auditState != null">
        audit_state = #{auditState,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.smart.home.modules.system.entity.SysFile">
    update sys_file
    set original_name = #{originalName,jdbcType=VARCHAR},
      new_name = #{newName,jdbcType=VARCHAR},
      url = #{url,jdbcType=VARCHAR},
      location = #{location,jdbcType=VARCHAR},
      mime = #{mime,jdbcType=VARCHAR},
      size = #{size,jdbcType=BIGINT},
      category = #{category,jdbcType=VARCHAR},
      md5 = #{md5,jdbcType=VARCHAR},
      sha1 = #{sha1,jdbcType=VARCHAR},
      store_type = #{storeType,jdbcType=VARCHAR},
      revision = #{revision,jdbcType=INTEGER},
      created_by = #{createdBy,jdbcType=BIGINT},
      created_time = #{createdTime,jdbcType=DATE},
      updated_by = #{updatedBy,jdbcType=BIGINT},
      updated_time = #{updatedTime,jdbcType=DATE},
      sync_flag = #{syncFlag,jdbcType=INTEGER},
      audit_state = #{auditState,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <update id="updateSyncFlag">
    update sys_file set sync_flag = #{flag},audit_state=1 where new_name = #{fileName}
  </update>

  <update id="updateSyncFlagList">
    update sys_file set sync_flag = #{flag},audit_state=1 where new_name in
    <foreach collection="fileNameList" item="fileName" open="(" separator="," close=")">
      #{fileName}
    </foreach>
  </update>
</mapper>