<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.smart.home.modules.community.dao.CommunityPostReplyMapper">
  <resultMap id="BaseResultMap" type="com.smart.home.modules.community.entity.CommunityPostReply">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="post_id" jdbcType="BIGINT" property="postId" />
    <result column="post_reply_id" jdbcType="BIGINT" property="postReplyId" />
    <result column="reply_type" jdbcType="INTEGER" property="replyType" />
    <result column="contents" jdbcType="VARCHAR" property="contents" />
    <result column="like_count" jdbcType="INTEGER" property="likeCount" />
    <result column="created_time" jdbcType="TIMESTAMP" property="createdTime" />
    <result column="stamp_count" jdbcType="INTEGER" property="stampCount" />
    <result column="author_flag" jdbcType="INTEGER" property="authorFlag" />
    <result column="to_user_id" jdbcType="BIGINT" property="toUserId" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, user_id, post_id, post_reply_id, reply_type, contents, like_count, created_time, 
    stamp_count,author_flag,to_user_id
  </sql>
  <select id="selectByExample" parameterType="com.smart.home.modules.community.entity.CommunityPostReplyExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from community_post_reply
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from community_post_reply
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from community_post_reply
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.smart.home.modules.community.entity.CommunityPostReplyExample">
    delete from community_post_reply
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.smart.home.modules.community.entity.CommunityPostReply">
    insert into community_post_reply (id, user_id, post_id, 
      post_reply_id, reply_type, contents, 
      like_count, created_time, stamp_count
      )
    values (#{id,jdbcType=BIGINT}, #{userId,jdbcType=BIGINT}, #{postId,jdbcType=BIGINT}, 
      #{postReplyId,jdbcType=BIGINT}, #{replyType,jdbcType=INTEGER}, #{contents,jdbcType=VARCHAR}, 
      #{likeCount,jdbcType=INTEGER}, #{createdTime,jdbcType=TIMESTAMP}, #{stampCount,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.smart.home.modules.community.entity.CommunityPostReply"
          useGeneratedKeys="true" keyProperty="id" keyColumn="id">
    insert into community_post_reply
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="postId != null">
        post_id,
      </if>
      <if test="postReplyId != null">
        post_reply_id,
      </if>
      <if test="replyType != null">
        reply_type,
      </if>
      <if test="contents != null">
        contents,
      </if>
      <if test="likeCount != null">
        like_count,
      </if>
      <if test="createdTime != null">
        created_time,
      </if>
      <if test="stampCount != null">
        stamp_count,
      </if>
      <if test="authorFlag != null">
        author_flag,
      </if>
      <if test="toUserId != null">
        to_user_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="postId != null">
        #{postId,jdbcType=BIGINT},
      </if>
      <if test="postReplyId != null">
        #{postReplyId,jdbcType=BIGINT},
      </if>
      <if test="replyType != null">
        #{replyType,jdbcType=INTEGER},
      </if>
      <if test="contents != null">
        #{contents,jdbcType=VARCHAR},
      </if>
      <if test="likeCount != null">
        #{likeCount,jdbcType=INTEGER},
      </if>
      <if test="createdTime != null">
        #{createdTime,jdbcType=TIMESTAMP},
      </if>
      <if test="stampCount != null">
        #{stampCount,jdbcType=INTEGER},
      </if>
      <if test="authorFlag != null">
        #{authorFlag},
      </if>
      <if test="toUserId != null">
        #{toUserId},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.smart.home.modules.community.entity.CommunityPostReplyExample" resultType="java.lang.Long">
    select count(*) from community_post_reply
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update community_post_reply
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=BIGINT},
      </if>
      <if test="record.postId != null">
        post_id = #{record.postId,jdbcType=BIGINT},
      </if>
      <if test="record.postReplyId != null">
        post_reply_id = #{record.postReplyId,jdbcType=BIGINT},
      </if>
      <if test="record.replyType != null">
        reply_type = #{record.replyType,jdbcType=INTEGER},
      </if>
      <if test="record.contents != null">
        contents = #{record.contents,jdbcType=VARCHAR},
      </if>
      <if test="record.likeCount != null">
        like_count = #{record.likeCount,jdbcType=INTEGER},
      </if>
      <if test="record.createdTime != null">
        created_time = #{record.createdTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.stampCount != null">
        stamp_count = #{record.stampCount,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update community_post_reply
    set id = #{record.id,jdbcType=BIGINT},
      user_id = #{record.userId,jdbcType=BIGINT},
      post_id = #{record.postId,jdbcType=BIGINT},
      post_reply_id = #{record.postReplyId,jdbcType=BIGINT},
      reply_type = #{record.replyType,jdbcType=INTEGER},
      contents = #{record.contents,jdbcType=VARCHAR},
      like_count = #{record.likeCount,jdbcType=INTEGER},
      created_time = #{record.createdTime,jdbcType=TIMESTAMP},
      stamp_count = #{record.stampCount,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.smart.home.modules.community.entity.CommunityPostReply">
    update community_post_reply
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="postId != null">
        post_id = #{postId,jdbcType=BIGINT},
      </if>
      <if test="postReplyId != null">
        post_reply_id = #{postReplyId,jdbcType=BIGINT},
      </if>
      <if test="replyType != null">
        reply_type = #{replyType,jdbcType=INTEGER},
      </if>
      <if test="contents != null">
        contents = #{contents,jdbcType=VARCHAR},
      </if>
      <if test="likeCount != null">
        like_count = #{likeCount,jdbcType=INTEGER},
      </if>
      <if test="createdTime != null">
        created_time = #{createdTime,jdbcType=TIMESTAMP},
      </if>
      <if test="stampCount != null">
        stamp_count = #{stampCount,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.smart.home.modules.community.entity.CommunityPostReply">
    update community_post_reply
    set user_id = #{userId,jdbcType=BIGINT},
      post_id = #{postId,jdbcType=BIGINT},
      post_reply_id = #{postReplyId,jdbcType=BIGINT},
      reply_type = #{replyType,jdbcType=INTEGER},
      contents = #{contents,jdbcType=VARCHAR},
      like_count = #{likeCount,jdbcType=INTEGER},
      created_time = #{createdTime,jdbcType=TIMESTAMP},
      stamp_count = #{stampCount,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <update id="increaseLikeCount">
    update community_post_reply set like_count = like_count + 1 where id = #{id,jdbcType=BIGINT}
    </update>

  <update id="decreaseLikeCount">
    update community_post_reply set like_count = like_count - 1 where id = #{id,jdbcType=BIGINT}
  </update>

  <update id="increaseStampCount">
    update community_post_reply set stamp_count = stamp_count + 1 where id = #{id,jdbcType=BIGINT}
  </update>

  <update id="decreaseStampCount">
    update community_post_reply set stamp_count = stamp_count - 1 where id = #{id,jdbcType=BIGINT}
  </update>

  <update id="updateAutoAuditFlag">
    update community_post_reply set auto_audit_flag = #{autoAuditFlag},text_exception_reason = #{reason} where id = #{id,jdbcType=BIGINT}
  </update>

  <update id="updateAutoAuditFlagAndAuditFlag">
    update community_post_reply set auto_audit_flag = #{autoAuditFlag},audit_flag=#{auditFlag} where id = #{id,jdbcType=BIGINT}
  </update>

  <update id="updateHitSensitiveCount">
    update community_post_reply set hit_sensitive_count = #{count} where id = #{id}
  </update>

  <update id="manuallyReject">
    update community_post_reply set audit_flag = #{flag} where id = #{id} and audit_flag = 0
  </update>

  <select id="findUserIdById" resultType="java.lang.Long">
    select user_id from community_post_reply where id = #{id}
  </select>

  <select id="queryViaUserIdByPageWhenLogin"
          resultType="com.smart.home.modules.community.entity.CommunityPostReply">
    select cpr.id,
           cpr.post_id as postId,
           ua.head_url as headUrl,
           ua.nick_name as nickName,
           ud.user_level as userLevel,
           cpr.contents,
           cpr.created_time as createdTime,
           cpr.like_count as likeCount,
           cpr.stamp_count as stampCount,
           case when alh.id is null then 0 else 1 end as likeFlag,
           case when ash.id is null then 0 else 1 end as stampFlag
    from community_post_reply cpr
                 left join user_account ua on ua.id = cpr.user_id
                 left join user_data ud on ud.user_id = ua.id
                 left join community_like_history alh on alh.post_id = cpr.id and alh.type = 1 and alh.user_id = #{loginUserId,jdbcType=BIGINT}
                 left join community_stamp_history ash on ash.post_id = cpr.id and ash.type = 1 and ash.user_id = #{loginUserId,jdbcType=BIGINT}
    where cpr.user_id = #{userId,jdbcType=BIGINT} and cpr.audit_flag = 1
    order by cpr.created_time desc
    </select>

  <select id="queryByIdWhenLogin" resultType="com.smart.home.modules.community.entity.CommunityPostReply" parameterType="com.smart.home.modules.community.dto.CommunityPostReplyDTO">
    select cpr.id,
           ua.head_url as headUrl,
           ua.nick_name as nickName,
           ud.user_level as userLevel,
            cpr.user_id as userId,
            cpr.post_reply_id as postReplyId,
            cpr.post_id as postId,
           cpr.contents,
           cpr.to_user_id as toUserId,
           cpr.created_time as createdTime,
           cpr.like_count as likeCount,
           cpr.stamp_count as stampCount,
           cpr.author_flag as authorFlag,
           case when alh.id is null then 0 else 1 end as likeFlag,
           case when ash.id is null then 0 else 1 end as stampFlag
    from community_post_reply cpr
                 left join user_account ua on ua.id = cpr.user_id
                 left join user_data ud on ud.user_id = ua.id
                 left join community_like_history alh on alh.post_id = cpr.id and alh.type = 1 and alh.user_id = #{userId,jdbcType=BIGINT}
                 left join community_stamp_history ash on ash.post_id = cpr.id and ash.type = 1 and ash.user_id = #{userId,jdbcType=BIGINT}
    where cpr.post_id = #{postId,jdbcType=BIGINT} and cpr.reply_type = #{replyType} and cpr.audit_flag = 1
    <if test="authorUserId != null">
      and cpr.user_id = #{authorUserId}
    </if>
    <choose>
      <when test="hotSortFlag != null">
        order by cpr.reply_count desc
      </when>
      <when test="sortFlag != null and sortFlag = 0">
        order by cpr.id asc
      </when>
      <otherwise>
        order by cpr.id desc
      </otherwise>
    </choose>
    </select>

  <select id="queryByPageNotLogin" resultType="com.smart.home.modules.community.entity.CommunityPostReply" parameterType="com.smart.home.modules.community.dto.CommunityPostReplyDTO">
    select cpr.id,
      ua.head_url as headUrl,
      ua.nick_name as nickName,
      ud.user_level as userLevel,
    cpr.user_id as userId,
    cpr.post_reply_id as postReplyId,
    cpr.post_id as postId,
      cpr.contents,
      cpr.to_user_id as toUserId,
      cpr.created_time as createdTime,
      cpr.like_count as likeCount,
      cpr.stamp_count as stampCount,
      cpr.author_flag as authorFlag
    from community_post_reply cpr
    left join user_account ua on ua.id = cpr.user_id
    left join user_data ud on ud.user_id = ua.id
    where cpr.post_id = #{postId,jdbcType=BIGINT} and cpr.reply_type = #{replyType} and cpr.audit_flag = 1
    <if test="authorUserId != null">
      and cpr.user_id = #{authorUserId}
    </if>
    <choose>
      <when test="hotSortFlag != null">
        order by cpr.reply_count desc
      </when>
      <when test="sortFlag != null and sortFlag = 0">
        order by cpr.id asc
      </when>
      <otherwise>
        order by cpr.id desc
      </otherwise>
    </choose>
    </select>

  <select id="countByUserId" resultType="long">
    select count(1) from community_post_reply where user_id = #{userId,jdbcType=BIGINT} and post_id = #{postId,jdbcType=BIGINT}
  </select>


  <select id="queryByCommentIdWhenLogin" resultType="com.smart.home.modules.community.entity.CommunityPostReply" parameterType="com.smart.home.modules.community.dto.CommunityPostReplyDTO">
    select cpr.id,
    ua.head_url as headUrl,
    ua.nick_name as nickName,
    ud.user_level as userLevel,
    cpr.user_id as userId,
    cpr.post_reply_id as postReplyId,
    cpr.post_id as postId,
    cpr.contents,
    cpr.to_user_id as toUserId,
    cpr.created_time as createdTime,
    cpr.like_count as likeCount,
    cpr.stamp_count as stampCount,
    cpr.author_flag as authorFlag,
    case when alh.id is null then 0 else 1 end as likeFlag,
    case when ash.id is null then 0 else 1 end as stampFlag
    from community_post_reply cpr
    left join user_account ua on ua.id = cpr.user_id
    left join user_data ud on ud.user_id = ua.id
    left join community_like_history alh on alh.post_id = cpr.id and alh.type = 2 and alh.user_id = #{userId,jdbcType=BIGINT}
    left join community_stamp_history ash on ash.post_id = cpr.id and ash.type = 2 and ash.user_id = #{userId,jdbcType=BIGINT}
    where cpr.post_reply_id = #{postReplyId,jdbcType=BIGINT} and cpr.reply_type = #{replyType} and cpr.audit_flag = 1
    order by cpr.id desc
  </select>

  <select id="queryByCommentIdNotLogin" resultType="com.smart.home.modules.community.entity.CommunityPostReply" parameterType="com.smart.home.modules.community.dto.CommunityPostReplyDTO">
    select cpr.id,
    ua.head_url as headUrl,
    ua.nick_name as nickName,
    ud.user_level as userLevel,
    cpr.user_id as userId,
    cpr.post_reply_id as postReplyId,
    cpr.post_id as postId,
    cpr.contents,
    cpr.to_user_id as toUserId,
    cpr.created_time as createdTime,
    cpr.like_count as likeCount,
    cpr.stamp_count as stampCount,
    cpr.author_flag as authorFlag
    from community_post_reply cpr
    left join user_account ua on ua.id = cpr.user_id
    left join user_data ud on ud.user_id = ua.id
    where cpr.post_reply_id = #{postReplyId,jdbcType=BIGINT} and cpr.reply_type = #{replyType} and cpr.audit_flag = 1
    order by cpr.id desc
  </select>
</mapper>