<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.smart.home.modules.community.dao.CommunityPostMapper">
  <resultMap id="BaseResultMap" type="com.smart.home.modules.community.entity.CommunityPost">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="community" jdbcType="INTEGER" property="community" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="contents" jdbcType="VARCHAR" property="contents" />
    <result column="images" jdbcType="VARCHAR" property="images" />
    <result column="top_flag" jdbcType="INTEGER" property="topFlag" />
    <result column="boutique_flag" jdbcType="INTEGER" property="boutiqueFlag" />
    <result column="like_count" jdbcType="INTEGER" property="likeCount" />
    <result column="comment_flag" jdbcType="INTEGER" property="commentFlag" />
    <result column="report_count" jdbcType="INTEGER" property="reportCount" />
    <result column="audit_status" jdbcType="INTEGER" property="auditStatus" />
    <result column="revision" jdbcType="INTEGER" property="revision" />
    <result column="created_time" jdbcType="TIMESTAMP" property="createdTime" />
    <result column="updated_by" jdbcType="BIGINT" property="updatedBy" />
    <result column="updated_time" jdbcType="TIMESTAMP" property="updatedTime" />
    <result column="stamp_count" jdbcType="INTEGER" property="stampCount" />
    <result column="collect_count" jdbcType="INTEGER" property="collectCount" />
    <result column="state" jdbcType="INTEGER" property="state" />
    <result column="reply_count" jdbcType="INTEGER" property="replyCount" />
    <result column="share_count" jdbcType="INTEGER" property="shareCount"/>
    <result column="visit_count" jdbcType="INTEGER" property="visitCount"/>
    <result column="auto_audit_flag" jdbcType="INTEGER" property="autoAuditFlag"/>
    <result column="remark" jdbcType="VARCHAR" property="remark"/>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, community, user_id, title, contents, images, top_flag, boutique_flag, like_count, 
    comment_flag, report_count, audit_status, revision, created_time, updated_by, updated_time, 
    stamp_count,collect_count,state,reply_count,visit_count,share_count
  </sql>
  <sql id="Base_Column_List_NO_CONTENTS">
    id, community, user_id, title, images, top_flag, boutique_flag, like_count,
    comment_flag, report_count, audit_status, revision, created_time, updated_by, updated_time,
    stamp_count,collect_count,state,reply_count,visit_count,share_count, remark
  </sql>
  <select id="selectByExample" parameterType="com.smart.home.modules.community.entity.CommunityPostExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from community_post
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from community_post
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from community_post
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.smart.home.modules.community.entity.CommunityPostExample">
    delete from community_post
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.smart.home.modules.community.entity.CommunityPost">
    insert into community_post (id, community, user_id, 
      title, contents, images, 
      top_flag, boutique_flag, like_count, 
      comment_flag, report_count, audit_status, 
      revision, created_time, updated_by, 
      updated_time, stamp_count)
    values (#{id,jdbcType=BIGINT}, #{community,jdbcType=INTEGER}, #{userId,jdbcType=BIGINT}, 
      #{title,jdbcType=VARCHAR}, #{contents,jdbcType=VARCHAR}, #{images,jdbcType=VARCHAR}, 
      #{topFlag,jdbcType=INTEGER}, #{boutiqueFlag,jdbcType=INTEGER}, #{likeCount,jdbcType=INTEGER}, 
      #{commentFlag,jdbcType=INTEGER}, #{reportCount,jdbcType=INTEGER}, #{auditStatus,jdbcType=INTEGER}, 
      #{revision,jdbcType=INTEGER}, #{createdTime,jdbcType=TIMESTAMP}, #{updatedBy,jdbcType=BIGINT}, 
      #{updatedTime,jdbcType=TIMESTAMP}, #{stampCount,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.smart.home.modules.community.entity.CommunityPost">
    insert into community_post
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="community != null">
        community,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="title != null">
        title,
      </if>
      <if test="contents != null">
        contents,
      </if>
      <if test="images != null">
        images,
      </if>
      <if test="topFlag != null">
        top_flag,
      </if>
      <if test="boutiqueFlag != null">
        boutique_flag,
      </if>
      <if test="likeCount != null">
        like_count,
      </if>
      <if test="commentFlag != null">
        comment_flag,
      </if>
      <if test="reportCount != null">
        report_count,
      </if>
      <if test="auditStatus != null">
        audit_status,
      </if>
      <if test="revision != null">
        revision,
      </if>
      <if test="createdTime != null">
        created_time,
      </if>
      <if test="updatedBy != null">
        updated_by,
      </if>
      <if test="updatedTime != null">
        updated_time,
      </if>
      <if test="stampCount != null">
        stamp_count,
      </if>
      <if test="collectCount != null">
        collect_count,
      </if>
      <if test="state != null">
        state,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="community != null">
        #{community,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="title != null">
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="contents != null">
        #{contents,jdbcType=VARCHAR},
      </if>
      <if test="images != null">
        #{images,jdbcType=VARCHAR},
      </if>
      <if test="topFlag != null">
        #{topFlag,jdbcType=INTEGER},
      </if>
      <if test="boutiqueFlag != null">
        #{boutiqueFlag,jdbcType=INTEGER},
      </if>
      <if test="likeCount != null">
        #{likeCount,jdbcType=INTEGER},
      </if>
      <if test="commentFlag != null">
        #{commentFlag,jdbcType=INTEGER},
      </if>
      <if test="reportCount != null">
        #{reportCount,jdbcType=INTEGER},
      </if>
      <if test="auditStatus != null">
        #{auditStatus,jdbcType=INTEGER},
      </if>
      <if test="revision != null">
        #{revision,jdbcType=INTEGER},
      </if>
      <if test="createdTime != null">
        #{createdTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedBy != null">
        #{updatedBy,jdbcType=BIGINT},
      </if>
      <if test="updatedTime != null">
        #{updatedTime,jdbcType=TIMESTAMP},
      </if>
      <if test="stampCount != null">
        #{stampCount,jdbcType=INTEGER},
      </if>
      <if test="collectCount != null">
        #{collectCount,jdbcType=INTEGER},
      </if>
      <if test="state != null">
        #{state,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.smart.home.modules.community.entity.CommunityPostExample" resultType="java.lang.Long">
    select count(*) from community_post
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update community_post
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.community != null">
        community = #{record.community,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=BIGINT},
      </if>
      <if test="record.title != null">
        title = #{record.title,jdbcType=VARCHAR},
      </if>
      <if test="record.contents != null">
        contents = #{record.contents,jdbcType=VARCHAR},
      </if>
      <if test="record.images != null">
        images = #{record.images,jdbcType=VARCHAR},
      </if>
      <if test="record.topFlag != null">
        top_flag = #{record.topFlag,jdbcType=INTEGER},
      </if>
      <if test="record.boutiqueFlag != null">
        boutique_flag = #{record.boutiqueFlag,jdbcType=INTEGER},
      </if>
      <if test="record.likeCount != null">
        like_count = #{record.likeCount,jdbcType=INTEGER},
      </if>
      <if test="record.commentFlag != null">
        comment_flag = #{record.commentFlag,jdbcType=INTEGER},
      </if>
      <if test="record.reportCount != null">
        report_count = #{record.reportCount,jdbcType=INTEGER},
      </if>
      <if test="record.auditStatus != null">
        audit_status = #{record.auditStatus,jdbcType=INTEGER},
      </if>
      <if test="record.revision != null">
        revision = #{record.revision,jdbcType=INTEGER},
      </if>
      <if test="record.createdTime != null">
        created_time = #{record.createdTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updatedBy != null">
        updated_by = #{record.updatedBy,jdbcType=BIGINT},
      </if>
      <if test="record.updatedTime != null">
        updated_time = #{record.updatedTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.stampCount != null">
        stamp_count = #{record.stampCount,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update community_post
    set id = #{record.id,jdbcType=BIGINT},
      community = #{record.community,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=BIGINT},
      title = #{record.title,jdbcType=VARCHAR},
      contents = #{record.contents,jdbcType=VARCHAR},
      images = #{record.images,jdbcType=VARCHAR},
      top_flag = #{record.topFlag,jdbcType=INTEGER},
      boutique_flag = #{record.boutiqueFlag,jdbcType=INTEGER},
      like_count = #{record.likeCount,jdbcType=INTEGER},
      comment_flag = #{record.commentFlag,jdbcType=INTEGER},
      report_count = #{record.reportCount,jdbcType=INTEGER},
      audit_status = #{record.auditStatus,jdbcType=INTEGER},
      revision = #{record.revision,jdbcType=INTEGER},
      created_time = #{record.createdTime,jdbcType=TIMESTAMP},
      updated_by = #{record.updatedBy,jdbcType=BIGINT},
      updated_time = #{record.updatedTime,jdbcType=TIMESTAMP},
      stamp_count = #{record.stampCount,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.smart.home.modules.community.entity.CommunityPost">
    update community_post
    <set>
      <if test="community != null">
        community = #{community,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="title != null">
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="contents != null">
        contents = #{contents,jdbcType=VARCHAR},
      </if>
      <if test="images != null">
        images = #{images,jdbcType=VARCHAR},
      </if>
      <if test="topFlag != null">
        top_flag = #{topFlag,jdbcType=INTEGER},
      </if>
      <if test="boutiqueFlag != null">
        boutique_flag = #{boutiqueFlag,jdbcType=INTEGER},
      </if>
      <if test="commentFlag != null">
        comment_flag = #{commentFlag,jdbcType=INTEGER},
      </if>
      <if test="auditStatus != null">
        audit_status = #{auditStatus,jdbcType=INTEGER},
      </if>
      <if test="revision != null">
        revision = #{revision,jdbcType=INTEGER},
      </if>
      <if test="createdTime != null">
        created_time = #{createdTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedBy != null">
        updated_by = #{updatedBy,jdbcType=BIGINT},
      </if>
      <if test="updatedTime != null">
        updated_time = #{updatedTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.smart.home.modules.community.entity.CommunityPost">
    update community_post
    set community = #{community,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=BIGINT},
      title = #{title,jdbcType=VARCHAR},
      contents = #{contents,jdbcType=VARCHAR},
      images = #{images,jdbcType=VARCHAR},
      top_flag = #{topFlag,jdbcType=INTEGER},
      boutique_flag = #{boutiqueFlag,jdbcType=INTEGER},
      like_count = #{likeCount,jdbcType=INTEGER},
      comment_flag = #{commentFlag,jdbcType=INTEGER},
      report_count = #{reportCount,jdbcType=INTEGER},
      audit_status = #{auditStatus,jdbcType=INTEGER},
      revision = #{revision,jdbcType=INTEGER},
      created_time = #{createdTime,jdbcType=TIMESTAMP},
      updated_by = #{updatedBy,jdbcType=BIGINT},
      updated_time = #{updatedTime,jdbcType=TIMESTAMP},
      stamp_count = #{stampCount,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <update id="increaseLikeCount">
    update community_post set like_count = like_count + 1 where id = #{id,jdbcType=BIGINT}
    </update>

  <update id="decreaseLikeCount">
    update community_post set like_count = like_count - 1 where id = #{id,jdbcType=BIGINT}
  </update>

  <update id="increaseStampCount">
    update community_post set stamp_count = stamp_count + 1 where id = #{id,jdbcType=BIGINT}
  </update>

  <update id="decreaseStampCount">
    update community_post set stamp_count = stamp_count - 1 where id = #{id,jdbcType=BIGINT}
  </update>

  <update id="increaseCollectCount">
    update community_post set collect_count = collect_count + 1 where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="decreaseCollectCount">
    update community_post set collect_count = collect_count - 1 where id = #{id,jdbcType=BIGINT}
  </update>

  <select id="countByCommunityId" resultType="long">
    select count(1) from community_post where community = #{communityId}
  </select>

  <update id="updateState">
    update community_post set state = #{state} where id = #{id}
  </update>

  <update id="increaseReportCount">
    update community_post set report_count = report_count + 1 where id = #{id,jdbcType=BIGINT}
    </update>

  <update id="updateBoutiqueFlag">
    update community_post set boutique_flag = #{flag} where id = #{id,jdbcType=BIGINT}
  </update>

  <update id="updateTopFlag">
    update community_post set top_flag = #{flag} where id = #{id,jdbcType=BIGINT}
  </update>

  <select id="queryViaUserIdByPage" resultType="com.smart.home.modules.community.entity.CommunityPost">
    select ua.head_url as headUrl,
           ua.nick_name as nickName,
           ud.user_level as userLevel,
           cp.title,
           cp.contents,
           cp.images,
           cp.like_count as likeCount,
           cp.reply_count as replyCount,
           cp.created_time as createdTime
    from community_post cp
                 left join user_account ua on ua.id = cp.user_id
                 left join user_data ud on ud.user_id = ua.id
    where cp.user_id = #{userId,jdbcType=BIGINT}
  </select>

  <update id="updateAutoAuditFlag">
    update community_post set auto_audit_flag = #{autoAuditFlag} where id = #{id,jdbcType=BIGINT}
  </update>

  <update id="updateAutoAuditFlagAndAuditFlag">
    update community_post set auto_audit_flag = #{autoAuditFlag},audit_status=#{auditFlag} where id = #{id,jdbcType=BIGINT}
  </update>

  <update id="updateHitSensitiveCount">
    update community_post set hit_sensitive_count = #{count} where id = #{id}
  </update>

  <update id="updateAuditStatus">
    update community_post set audit_status = #{flag} where id = #{id} and audit_status = 0
  </update>

  <select id="findUserIdById" resultType="java.lang.Long">
    select user_id from community_post where id = #{id}
  </select>

  <update id="increaseReplyCount">
    update community_post set reply_count = reply_count + 1 where id = #{id}
  </update>

  <select id="queryCollectViaUserIdByPage" resultType="com.smart.home.modules.community.entity.CommunityPost">
    select cp.id,
           cp.images,
           cp.title,
           cp.contents,
           cp.created_time as createdTime,
           cp.like_count as likeCount,
           cp.reply_count as replyCount,
           ua.head_url as headUrl,
           ua.nick_name as nickName,
           ud.user_level as userLevel,
           case when clh.id is null then 0 else 1 end as likeFlag
    from user_collect uc
                 left join community_post cp on cp.id = uc.primary_key and uc.collect_type = 1
                 left join user_account ua on ua.id = uc.user_id
                 left join user_data ud on ud.user_id = ua.id
                 left join community_like_history clh on clh.post_id = cp.id and clh.type = 0
    where uc.user_id = #{userId,jdbcType=BIGINT}
      and uc.collect_type = 1
    </select>

    <update id="increaseVisitCount" parameterType="long">
      update community_post set visit_count = visit_count + 1 where id = #{id}
    </update>
  
    <select id="getSortRecommend" resultMap="BaseResultMap">
      select <include refid="Base_Column_List_NO_CONTENTS"/>
      FROM
      community_post
      where state = 1 and audit_status = 1
      ORDER BY
      visit_count DESC,
      created_time DESC,
      reply_count DESC,
      like_count DESC,
      collect_count DESC,
      share_count DESC
    </select>

  <select id="getHotPost" resultMap="BaseResultMap">
      select <include refid="Base_Column_List_NO_CONTENTS"/>
      FROM
      community_post
      where created_time between #{startTime} and #{endTime} and state = 1 and audit_status = 1
      ORDER BY
      reply_count DESC
  </select>

  <select id="getCommunityDetail" resultMap="BaseResultMap" parameterType="java.lang.Integer">
      select <include refid="Base_Column_List_NO_CONTENTS"/>
      FROM
      community_post
      <where>
        state = 1 and audit_status = 1
        <if test="boutiqueFlag != null">
          and boutique_flag = #{boutiqueFlag}
        </if>
      </where>
      ORDER BY
      top_flag desc,
      created_time DESC
  </select>
  
  
  <select id="selectByIdEffetive" resultType="com.smart.home.modules.community.dto.CommunityPostDTO">
    select a.id,
           a.title,
           a.contents,
           a.images,
           a.top_flag as topFlag,
           a.created_time as createdTime,
           a.visit_count as visitCount,
           a.boutique_flag as boutiqueFlag,
           a.like_count as likeCount,
           a.comment_flag as commentFlag,
           a.collect_count as collectCount,
           ua.head_url as headUrl,
           ua.nick_name as nickName,
           ud.remark as userRemark,
           ud.sign,
           ud.user_level as userLevel,
           case when uc.id is null then 0 else 1 end as collectFlag,
           case when clh.id is null then 0 else 1 end as likeFlag,
           case when csh.id is null then 0 else 1 end as stampFlag,
           case when uf.id is null then 0 else 1 end as focusFlag
    from community_post a
                 left join user_account ua on a.user_id = ua.id
                 left join user_data ud on ua.id = ud.user_id
                 left join user_collect uc on uc.primary_key = a.id and collect_type = 1 and uc.user_id = #{userId,jdbcType=BIGINT}
                 left join community_like_history clh on clh.post_id = a.id and clh.type = 0 and clh.user_id = #{userId,jdbcType=BIGINT}
                 left join community_stamp_history csh on csh.post_id = a.id and csh.type = 0 and csh.user_id = #{userId,jdbcType=BIGINT}
                 left join user_follower uf on ua.id = uf.user_id and uf.follower_user_id = #{userId,jdbcType=BIGINT}
    where a.id = #{id,jdbcType=BIGINT} and a.state = 1 and a.audit_status = 1 and ua.state = 0
  </select>

  <select id="selectById" resultType="com.smart.home.modules.community.dto.CommunityPostDTO">
    select a.id,
           a.title,
           a.contents,
           a.images,
           a.top_flag as topFlag,
           a.created_time as createdTime,
           a.visit_count as visitCount,
           a.boutique_flag as boutiqueFlag,
           a.like_count as likeCount,
           a.comment_flag as commentFlag,
           a.collect_count as collectCount,
           ua.head_url as headUrl,
           ua.nick_name as nickName,
           ud.remark as userRemark,
           ud.sign,
           ud.user_level as userLevel
    from community_post a
                 left join user_account ua on a.user_id = ua.id
                 left join user_data ud on ua.id = ud.user_id
    where a.id = #{id,jdbcType=BIGINT} and a.state = 1 and a.audit_status = 1 and ua.state = 0
  </select>
  
</mapper>